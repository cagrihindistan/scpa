
hello_scpa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008868  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008a30  08008a30  00009a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a88  08008a88  0000a15c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a88  08008a88  00009a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a90  08008a90  0000a15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a90  08008a90  00009a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a94  08008a94  00009a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08008a98  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  2000015c  08008bf4  0000a15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  08008bf4  0000ad54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154de  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003673  00000000  00000000  0001f66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00022ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e04  00000000  00000000  00023f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a92  00000000  00000000  00024d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180cb  00000000  00000000  0004d7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef54b  00000000  00000000  000658b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154e04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005048  00000000  00000000  00154e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00159e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000015c 	.word	0x2000015c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008a18 	.word	0x08008a18

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000160 	.word	0x20000160
 8000204:	08008a18 	.word	0x08008a18

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fa85 	bl	8000e22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f80e 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f000 f8c8 	bl	8000ab0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000920:	f007 f950 	bl	8007bc4 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000924:	f000 f876 	bl	8000a14 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim5);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <main+0x24>)
 800092a:	f003 f9a5 	bl	8003c78 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092e:	bf00      	nop
 8000930:	e7fd      	b.n	800092e <main+0x1e>
 8000932:	bf00      	nop
 8000934:	20000178 	.word	0x20000178

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	@ 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	@ 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 ffca 	bl	80088e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800095c:	f002 f842 	bl	80029e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <SystemClock_Config+0xd4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a29      	ldr	r2, [pc, #164]	@ (8000a0c <SystemClock_Config+0xd4>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
 800096c:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <SystemClock_Config+0xd4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <SystemClock_Config+0xd8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a24      	ldr	r2, [pc, #144]	@ (8000a10 <SystemClock_Config+0xd8>)
 800097e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <SystemClock_Config+0xd8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000994:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009a8:	23d8      	movs	r3, #216	@ 0xd8
 80009aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009b0:	2309      	movs	r3, #9
 80009b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 f873 	bl	8002aa4 <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009c4:	f000 f8dc 	bl	8000b80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009c8:	f002 f81c 	bl	8002a04 <HAL_PWREx_EnableOverDrive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009d2:	f000 f8d5 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2107      	movs	r1, #7
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 faf9 	bl	8002fec <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a00:	f000 f8be 	bl	8000b80 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3750      	adds	r7, #80	@ 0x50
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a34:	4a1d      	ldr	r2, [pc, #116]	@ (8000aac <MX_TIM5_Init+0x98>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a3a:	226b      	movs	r2, #107	@ 0x6b
 8000a3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000a44:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a58:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a5a:	f003 f8b5 	bl	8003bc8 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000a64:	f000 f88c 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a76:	f003 fa7f 	bl	8003f78 <HAL_TIM_ConfigClockSource>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000a80:	f000 f87e 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_TIM5_Init+0x94>)
 8000a92:	f003 fcb3 	bl	80043fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f870 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000178 	.word	0x20000178
 8000aac:	40000c00 	.word	0x40000c00

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a2a      	ldr	r2, [pc, #168]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a24      	ldr	r2, [pc, #144]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a1e      	ldr	r2, [pc, #120]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b2c:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000b2e:	f000 fcb7 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000b4a:	f000 fafd 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b4e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000b68:	f000 faee 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	@ 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020800 	.word	0x40020800

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <HAL_TIM_Base_MspInit+0x44>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d113      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2032      	movs	r0, #50	@ 0x32
 8000c04:	f000 fa69 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c08:	2032      	movs	r0, #50	@ 0x32
 8000c0a:	f000 fa82 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40000c00 	.word	0x40000c00
 8000c1c:	40023800 	.word	0x40023800

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <NMI_Handler+0x4>

08000c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c76:	f000 f911 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	time=time+0.001;
 8000c84:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <TIM5_IRQHandler+0x98>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc21 	bl	80004d0 <__aeabi_f2d>
 8000c8e:	a320      	add	r3, pc, #128	@ (adr r3, 8000d10 <TIM5_IRQHandler+0x90>)
 8000c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c94:	f7ff fabe 	bl	8000214 <__adddf3>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f7ff fc6e 	bl	8000580 <__aeabi_d2f>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d18 <TIM5_IRQHandler+0x98>)
 8000ca8:	6013      	str	r3, [r2, #0]


	data1_send.number=time;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <TIM5_IRQHandler+0x98>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <TIM5_IRQHandler+0x9c>)
 8000cb0:	6013      	str	r3, [r2, #0]



	USB_TX_Buf[0]=35;//ascii 35 is #
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cb4:	2223      	movs	r2, #35	@ 0x23
 8000cb6:	701a      	strb	r2, [r3, #0]

	USB_TX_Buf[1] = data1_send.bytes[0];
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <TIM5_IRQHandler+0x9c>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cbe:	705a      	strb	r2, [r3, #1]
	USB_TX_Buf[2] = data1_send.bytes[1];
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <TIM5_IRQHandler+0x9c>)
 8000cc2:	785a      	ldrb	r2, [r3, #1]
 8000cc4:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cc6:	709a      	strb	r2, [r3, #2]
	USB_TX_Buf[3] = data1_send.bytes[2];
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <TIM5_IRQHandler+0x9c>)
 8000cca:	789a      	ldrb	r2, [r3, #2]
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cce:	70da      	strb	r2, [r3, #3]
	USB_TX_Buf[4] = data1_send.bytes[3];
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <TIM5_IRQHandler+0x9c>)
 8000cd2:	78da      	ldrb	r2, [r3, #3]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cd6:	711a      	strb	r2, [r3, #4]

	USB_TX_Buf[5] = data2_send.bytes[0];
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <TIM5_IRQHandler+0xa4>)
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cde:	715a      	strb	r2, [r3, #5]
	USB_TX_Buf[6] = data2_send.bytes[1];
 8000ce0:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <TIM5_IRQHandler+0xa4>)
 8000ce2:	785a      	ldrb	r2, [r3, #1]
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000ce6:	719a      	strb	r2, [r3, #6]
	USB_TX_Buf[7] = data2_send.bytes[2];
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <TIM5_IRQHandler+0xa4>)
 8000cea:	789a      	ldrb	r2, [r3, #2]
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cee:	71da      	strb	r2, [r3, #7]
	USB_TX_Buf[8] = data2_send.bytes[3];
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <TIM5_IRQHandler+0xa4>)
 8000cf2:	78da      	ldrb	r2, [r3, #3]
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cf6:	721a      	strb	r2, [r3, #8]


	USB_TX_Buf[9] = 10;// ascii \n
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000cfa:	220a      	movs	r2, #10
 8000cfc:	725a      	strb	r2, [r3, #9]


	CDC_Transmit_FS(USB_TX_Buf, 10);
 8000cfe:	210a      	movs	r1, #10
 8000d00:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <TIM5_IRQHandler+0xa0>)
 8000d02:	f007 f867 	bl	8007dd4 <CDC_Transmit_FS>


  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d06:	4808      	ldr	r0, [pc, #32]	@ (8000d28 <TIM5_IRQHandler+0xa8>)
 8000d08:	f003 f82e 	bl	8003d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	d2f1a9fc 	.word	0xd2f1a9fc
 8000d14:	3f50624d 	.word	0x3f50624d
 8000d18:	20000240 	.word	0x20000240
 8000d1c:	2000022c 	.word	0x2000022c
 8000d20:	200001c4 	.word	0x200001c4
 8000d24:	20000230 	.word	0x20000230
 8000d28:	20000178 	.word	0x20000178

08000d2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <OTG_FS_IRQHandler+0x10>)
 8000d32:	f000 fd06 	bl	8001742 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000172c 	.word	0x2000172c

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	@ (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f007 fdce 	bl	8008910 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20050000 	.word	0x20050000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	20000244 	.word	0x20000244
 8000da8:	20001d58 	.word	0x20001d58

08000dac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd4:	f7ff ffea 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	@ (8000e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f007 fd8d 	bl	800891c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fd85 	bl	8000910 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000e14:	08008a98 	.word	0x08008a98
  ldr r2, =_sbss
 8000e18:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000e1c:	20001d54 	.word	0x20001d54

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>

08000e22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f94c 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f805 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e32:	f7ff feab 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f967 	bl	800112e <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f92f 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000248 	.word	0x20000248

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000248 	.word	0x20000248

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	05fa0000 	.word	0x05fa0000

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	@ 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e175      	b.n	8001454 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8164 	bne.w	800144e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d005      	beq.n	800119e <HAL_GPIO_Init+0x56>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d130      	bne.n	8001200 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 0201 	and.w	r2, r3, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b03      	cmp	r3, #3
 800120a:	d017      	beq.n	800123c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	69b9      	ldr	r1, [r7, #24]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80be 	beq.w	800144e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4b66      	ldr	r3, [pc, #408]	@ (800146c <HAL_GPIO_Init+0x324>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a65      	ldr	r2, [pc, #404]	@ (800146c <HAL_GPIO_Init+0x324>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b63      	ldr	r3, [pc, #396]	@ (800146c <HAL_GPIO_Init+0x324>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ea:	4a61      	ldr	r2, [pc, #388]	@ (8001470 <HAL_GPIO_Init+0x328>)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a58      	ldr	r2, [pc, #352]	@ (8001474 <HAL_GPIO_Init+0x32c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d037      	beq.n	8001386 <HAL_GPIO_Init+0x23e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a57      	ldr	r2, [pc, #348]	@ (8001478 <HAL_GPIO_Init+0x330>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d031      	beq.n	8001382 <HAL_GPIO_Init+0x23a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a56      	ldr	r2, [pc, #344]	@ (800147c <HAL_GPIO_Init+0x334>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x236>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a55      	ldr	r2, [pc, #340]	@ (8001480 <HAL_GPIO_Init+0x338>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x232>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a54      	ldr	r2, [pc, #336]	@ (8001484 <HAL_GPIO_Init+0x33c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x22e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a53      	ldr	r2, [pc, #332]	@ (8001488 <HAL_GPIO_Init+0x340>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x22a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a52      	ldr	r2, [pc, #328]	@ (800148c <HAL_GPIO_Init+0x344>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x226>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a51      	ldr	r2, [pc, #324]	@ (8001490 <HAL_GPIO_Init+0x348>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x222>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a50      	ldr	r2, [pc, #320]	@ (8001494 <HAL_GPIO_Init+0x34c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x21e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4f      	ldr	r2, [pc, #316]	@ (8001498 <HAL_GPIO_Init+0x350>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x21a>
 800135e:	2309      	movs	r3, #9
 8001360:	e012      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001362:	230a      	movs	r3, #10
 8001364:	e010      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001366:	2308      	movs	r3, #8
 8001368:	e00e      	b.n	8001388 <HAL_GPIO_Init+0x240>
 800136a:	2307      	movs	r3, #7
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x240>
 800136e:	2306      	movs	r3, #6
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x240>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x240>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001398:	4935      	ldr	r1, [pc, #212]	@ (8001470 <HAL_GPIO_Init+0x328>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b3d      	ldr	r3, [pc, #244]	@ (800149c <HAL_GPIO_Init+0x354>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a34      	ldr	r2, [pc, #208]	@ (800149c <HAL_GPIO_Init+0x354>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <HAL_GPIO_Init+0x354>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a29      	ldr	r2, [pc, #164]	@ (800149c <HAL_GPIO_Init+0x354>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <HAL_GPIO_Init+0x354>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141e:	4a1f      	ldr	r2, [pc, #124]	@ (800149c <HAL_GPIO_Init+0x354>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <HAL_GPIO_Init+0x354>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001448:	4a14      	ldr	r2, [pc, #80]	@ (800149c <HAL_GPIO_Init+0x354>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f ae86 	bls.w	8001168 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3724      	adds	r7, #36	@ 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40013800 	.word	0x40013800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40021400 	.word	0x40021400
 800148c:	40021800 	.word	0x40021800
 8001490:	40021c00 	.word	0x40021c00
 8001494:	40022000 	.word	0x40022000
 8001498:	40022400 	.word	0x40022400
 800149c:	40013c00 	.word	0x40013c00

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af02      	add	r7, sp, #8
 80014d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e108      	b.n	80016f6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f006 fdc2 	bl	8008088 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2203      	movs	r2, #3
 8001508:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001512:	d102      	bne.n	800151a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f003 f925 	bl	800476e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7c1a      	ldrb	r2, [r3, #16]
 800152c:	f88d 2000 	strb.w	r2, [sp]
 8001530:	3304      	adds	r3, #4
 8001532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001534:	f003 f80e 	bl	8004554 <USB_CoreInit>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2202      	movs	r2, #2
 8001542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0d5      	b.n	80016f6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f003 f91d 	bl	8004790 <USB_SetCurrentMode>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2202      	movs	r2, #2
 8001560:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0c6      	b.n	80016f6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e04a      	b.n	8001604 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	3315      	adds	r3, #21
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3314      	adds	r3, #20
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	b298      	uxth	r0, r3
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	332e      	adds	r3, #46	@ 0x2e
 80015aa:	4602      	mov	r2, r0
 80015ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	3318      	adds	r3, #24
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	331c      	adds	r3, #28
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	3320      	adds	r3, #32
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	3324      	adds	r3, #36	@ 0x24
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	3301      	adds	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3af      	bcc.n	800156e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e044      	b.n	800169e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	3301      	adds	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	791b      	ldrb	r3, [r3, #4]
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3b5      	bcc.n	8001614 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7c1a      	ldrb	r2, [r3, #16]
 80016b0:	f88d 2000 	strb.w	r2, [sp]
 80016b4:	3304      	adds	r3, #4
 80016b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b8:	f003 f8b6 	bl	8004828 <USB_DevInit>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2202      	movs	r2, #2
 80016c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e013      	b.n	80016f6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7b1b      	ldrb	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d102      	bne.n	80016ea <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f001 f959 	bl	800299c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 f8f5 	bl	80058de <USB_DevDisconnect>

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_PCD_Start+0x16>
 8001710:	2302      	movs	r3, #2
 8001712:	e012      	b.n	800173a <HAL_PCD_Start+0x3c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f813 	bl	800474c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f004 f8b6 	bl	800589c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b08d      	sub	sp, #52	@ 0x34
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f004 f974 	bl	8005a46 <USB_GetMode>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 84b9 	bne.w	80020d8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f004 f8d8 	bl	8005920 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 84af 	beq.w	80020d6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f004 f8c5 	bl	8005920 <USB_ReadInterrupts>
 8001796:	4603      	mov	r3, r0
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b02      	cmp	r3, #2
 800179e:	d107      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f002 0202 	and.w	r2, r2, #2
 80017ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 f8b3 	bl	8005920 <USB_ReadInterrupts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d161      	bne.n	8001888 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f003 020f 	and.w	r2, r3, #15
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	3304      	adds	r3, #4
 80017f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	0c5b      	lsrs	r3, r3, #17
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d124      	bne.n	800184a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d035      	beq.n	8001878 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	6a38      	ldr	r0, [r7, #32]
 8001820:	f003 feea 	bl	80055f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001830:	441a      	add	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001842:	441a      	add	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	e016      	b.n	8001878 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	0c5b      	lsrs	r3, r3, #17
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	2b06      	cmp	r3, #6
 8001854:	d110      	bne.n	8001878 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800185c:	2208      	movs	r2, #8
 800185e:	4619      	mov	r1, r3
 8001860:	6a38      	ldr	r0, [r7, #32]
 8001862:	f003 fec9 	bl	80055f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001872:	441a      	add	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0210 	orr.w	r2, r2, #16
 8001886:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f004 f847 	bl	8005920 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001898:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800189c:	f040 80a7 	bne.w	80019ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 f84c 	bl	8005946 <USB_ReadDevAllOutEpInterrupt>
 80018ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80018b0:	e099      	b.n	80019e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 808e 	beq.w	80019da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 f870 	bl	80059ae <USB_ReadDevOutEPInterrupt>
 80018ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fece 	bl	8002690 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800190a:	461a      	mov	r2, r3
 800190c:	2308      	movs	r3, #8
 800190e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 ffa4 	bl	8002860 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800192e:	461a      	mov	r2, r3
 8001930:	2310      	movs	r3, #16
 8001932:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d030      	beq.n	80019a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001946:	2b80      	cmp	r3, #128	@ 0x80
 8001948:	d109      	bne.n	800195e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001958:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800195c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800195e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2200      	movs	r2, #0
 8001980:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4619      	mov	r1, r3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f006 fca1 	bl	80082d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800199a:	461a      	mov	r2, r3
 800199c:	2302      	movs	r3, #2
 800199e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019b6:	461a      	mov	r2, r3
 80019b8:	2320      	movs	r3, #32
 80019ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	015a      	lsls	r2, r3, #5
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019d2:	461a      	mov	r2, r3
 80019d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	3301      	adds	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f af62 	bne.w	80018b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 ff94 	bl	8005920 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a02:	f040 80db 	bne.w	8001bbc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 ffb5 	bl	800597a <USB_ReadDevAllInEpInterrupt>
 8001a10:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001a16:	e0cd      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80c2 	beq.w	8001ba8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 ffdb 	bl	80059ea <USB_ReadDevInEPInterrupt>
 8001a34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d057      	beq.n	8001af0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	2201      	movs	r2, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69f9      	ldr	r1, [r7, #28]
 8001a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001a60:	4013      	ands	r3, r2
 8001a62:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a70:	461a      	mov	r2, r3
 8001a72:	2301      	movs	r3, #1
 8001a74:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	799b      	ldrb	r3, [r3, #6]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d132      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3320      	adds	r3, #32
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4403      	add	r3, r0
 8001a9e:	331c      	adds	r3, #28
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4419      	add	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4403      	add	r3, r0
 8001ab2:	3320      	adds	r3, #32
 8001ab4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d113      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	3324      	adds	r3, #36	@ 0x24
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d108      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001adc:	461a      	mov	r2, r3
 8001ade:	2101      	movs	r1, #1
 8001ae0:	f003 ffe4 	bl	8005aac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f006 fb6b 	bl	80081c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b06:	461a      	mov	r2, r3
 8001b08:	2308      	movs	r3, #8
 8001b0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b22:	461a      	mov	r2, r3
 8001b24:	2310      	movs	r3, #16
 8001b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2340      	movs	r3, #64	@ 0x40
 8001b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d023      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b50:	6a38      	ldr	r0, [r7, #32]
 8001b52:	f002 ffc7 	bl	8004ae4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	3310      	adds	r3, #16
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	3304      	adds	r3, #4
 8001b68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	78db      	ldrb	r3, [r3, #3]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f006 fbb8 	bl	80082f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b90:	461a      	mov	r2, r3
 8001b92:	2302      	movs	r3, #2
 8001b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fce8 	bl	8002578 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	3301      	adds	r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f af2e 	bne.w	8001a18 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fead 	bl	8005920 <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bd0:	d122      	bne.n	8001c18 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f006 fd32 	bl	8008664 <HAL_PCDEx_LPM_Callback>
 8001c00:	e002      	b.n	8001c08 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f006 fb56 	bl	80082b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fe7f 	bl	8005920 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c2c:	d112      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d102      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f006 fb12 	bl	8008268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fe61 	bl	8005920 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c68:	d121      	bne.n	8001cae <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001c78:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	f003 020f 	and.w	r2, r3, #15
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f006 fcdf 	bl	8008664 <HAL_PCDEx_LPM_Callback>
 8001ca6:	e002      	b.n	8001cae <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f006 fadd 	bl	8008268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fe34 	bl	8005920 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cc2:	f040 80b7 	bne.w	8001e34 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2110      	movs	r1, #16
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 feff 	bl	8004ae4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cea:	e046      	b.n	8001d7a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001cfe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d10:	0151      	lsls	r1, r2, #5
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	440a      	add	r2, r1
 8001d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001d1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d44:	0151      	lsls	r1, r2, #5
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	440a      	add	r2, r1
 8001d4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d64:	0151      	lsls	r1, r2, #5
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	440a      	add	r2, r1
 8001d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d76:	3301      	adds	r3, #1
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	791b      	ldrb	r3, [r3, #4]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d3b2      	bcc.n	8001cec <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d94:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001d98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7bdb      	ldrb	r3, [r3, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001db2:	f043 030b 	orr.w	r3, r3, #11
 8001db6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dc8:	f043 030b 	orr.w	r3, r3, #11
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	e015      	b.n	8001dfc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dde:	4619      	mov	r1, r3
 8001de0:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001de4:	4313      	orrs	r3, r2
 8001de6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001df6:	f043 030b 	orr.w	r3, r3, #11
 8001dfa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e0a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001e0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f003 fe44 	bl	8005aac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 fd71 	bl	8005920 <USB_ReadInterrupts>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e48:	d123      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fe08 	bl	8005a64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 febc 	bl	8004bd6 <USB_GetDevSpeed>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681c      	ldr	r4, [r3, #0]
 8001e6a:	f001 fab1 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8001e6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e74:	461a      	mov	r2, r3
 8001e76:	4620      	mov	r0, r4
 8001e78:	f002 fbc6 	bl	8004608 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f006 f9ca 	bl	8008216 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fd42 	bl	8005920 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d10a      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f006 f9a7 	bl	80081fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f002 0208 	and.w	r2, r2, #8
 8001eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fd2d 	bl	8005920 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ecc:	2b80      	cmp	r3, #128	@ 0x80
 8001ece:	d123      	bne.n	8001f18 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee0:	e014      	b.n	8001f0c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d105      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fb08 	bl	8002516 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	3301      	adds	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	461a      	mov	r2, r3
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d3e4      	bcc.n	8001ee2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 fcff 	bl	8005920 <USB_ReadInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f2c:	d13c      	bne.n	8001fa8 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f2e:	2301      	movs	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f32:	e02b      	b.n	8001f8c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3318      	adds	r3, #24
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d115      	bne.n	8001f86 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da12      	bge.n	8001f86 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3317      	adds	r3, #23
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fac8 	bl	8002516 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	461a      	mov	r2, r3
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d3cd      	bcc.n	8001f34 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fcb7 	bl	8005920 <USB_ReadInterrupts>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fbc:	d156      	bne.n	800206c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc2:	e045      	b.n	8002050 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d12e      	bne.n	800204a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da2b      	bge.n	800204a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ffe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002002:	429a      	cmp	r2, r3
 8002004:	d121      	bne.n	800204a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002046:	6053      	str	r3, [r2, #4]
            break;
 8002048:	e008      	b.n	800205c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	461a      	mov	r2, r3
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	4293      	cmp	r3, r2
 800205a:	d3b3      	bcc.n	8001fc4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800206a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fc55 	bl	8005920 <USB_ReadInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002080:	d10a      	bne.n	8002098 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f006 f948 	bl	8008318 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fc3f 	bl	8005920 <USB_ReadInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d115      	bne.n	80020d8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f006 f938 	bl	8008334 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	e000      	b.n	80020d8 <HAL_PCD_IRQHandler+0x996>
      return;
 80020d6:	bf00      	nop
    }
  }
}
 80020d8:	3734      	adds	r7, #52	@ 0x34
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}

080020de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_PCD_SetAddress+0x1a>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e012      	b.n	800211e <HAL_PCD_SetAddress+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f003 fb9e 	bl	8005850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	4608      	mov	r0, r1
 8002130:	4611      	mov	r1, r2
 8002132:	461a      	mov	r2, r3
 8002134:	4603      	mov	r3, r0
 8002136:	70fb      	strb	r3, [r7, #3]
 8002138:	460b      	mov	r3, r1
 800213a:	803b      	strh	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da0f      	bge.n	800216c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 020f 	and.w	r2, r3, #15
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	3310      	adds	r3, #16
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	705a      	strb	r2, [r3, #1]
 800216a:	e00f      	b.n	800218c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	b2da      	uxtb	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002198:	883a      	ldrh	r2, [r7, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	78ba      	ldrb	r2, [r7, #2]
 80021a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	785b      	ldrb	r3, [r3, #1]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021b6:	78bb      	ldrb	r3, [r7, #2]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d102      	bne.n	80021c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_PCD_EP_Open+0xaa>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e00e      	b.n	80021ee <HAL_PCD_EP_Open+0xc8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fd1e 	bl	8004c20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80021ec:	7afb      	ldrb	r3, [r7, #11]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002206:	2b00      	cmp	r3, #0
 8002208:	da0f      	bge.n	800222a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	3310      	adds	r3, #16
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	705a      	strb	r2, [r3, #1]
 8002228:	e00f      	b.n	800224a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	f003 020f 	and.w	r2, r3, #15
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	3304      	adds	r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	b2da      	uxtb	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_PCD_EP_Close+0x6e>
 8002260:	2302      	movs	r3, #2
 8002262:	e00e      	b.n	8002282 <HAL_PCD_EP_Close+0x8c>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fd5c 	bl	8004d30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	460b      	mov	r3, r1
 8002298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	f003 020f 	and.w	r2, r3, #15
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	799b      	ldrb	r3, [r3, #6]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d102      	bne.n	80022e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	799b      	ldrb	r3, [r3, #6]
 80022ee:	461a      	mov	r2, r3
 80022f0:	6979      	ldr	r1, [r7, #20]
 80022f2:	f002 fdf9 	bl	8004ee8 <USB_EPStartXfer>

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 020f 	and.w	r2, r3, #15
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	460b      	mov	r3, r1
 800233e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3310      	adds	r3, #16
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2201      	movs	r2, #1
 800236e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002370:	7afb      	ldrb	r3, [r7, #11]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	b2da      	uxtb	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	799b      	ldrb	r3, [r3, #6]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d102      	bne.n	800238a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	799b      	ldrb	r3, [r3, #6]
 8002392:	461a      	mov	r2, r3
 8002394:	6979      	ldr	r1, [r7, #20]
 8002396:	f002 fda7 	bl	8004ee8 <USB_EPStartXfer>

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	7912      	ldrb	r2, [r2, #4]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e04f      	b.n	8002462 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	da0f      	bge.n	80023ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 020f 	and.w	r2, r3, #15
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	3310      	adds	r3, #16
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	705a      	strb	r2, [r3, #1]
 80023e8:	e00d      	b.n	8002406 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_PCD_EP_SetStall+0x82>
 8002422:	2302      	movs	r3, #2
 8002424:	e01d      	b.n	8002462 <HAL_PCD_EP_SetStall+0xbe>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 f937 	bl	80056a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7999      	ldrb	r1, [r3, #6]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002452:	461a      	mov	r2, r3
 8002454:	f003 fb2a 	bl	8005aac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	7912      	ldrb	r2, [r2, #4]
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e042      	b.n	800250e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da0f      	bge.n	80024b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	3310      	adds	r3, #16
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	4413      	add	r3, r2
 80024a4:	3304      	adds	r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	705a      	strb	r2, [r3, #1]
 80024ae:	e00f      	b.n	80024d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 020f 	and.w	r2, r3, #15
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	3304      	adds	r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_PCD_EP_ClrStall+0x86>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e00e      	b.n	800250e <HAL_PCD_EP_ClrStall+0xa4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 f940 	bl	8005784 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002526:	2b00      	cmp	r3, #0
 8002528:	da0c      	bge.n	8002544 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	3310      	adds	r3, #16
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	3304      	adds	r3, #4
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e00c      	b.n	800255e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	f003 020f 	and.w	r2, r3, #15
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	3304      	adds	r3, #4
 800255c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	4618      	mov	r0, r3
 8002566:	f002 ff5f 	bl	8005428 <USB_EPStopXfer>
 800256a:	4603      	mov	r3, r0
 800256c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800256e:	7afb      	ldrb	r3, [r7, #11]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	@ 0x28
 800257c:	af02      	add	r7, sp, #8
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	3310      	adds	r3, #16
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	3304      	adds	r3, #4
 800259e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d901      	bls.n	80025b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e06b      	b.n	8002688 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d902      	bls.n	80025cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3303      	adds	r3, #3
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025d4:	e02a      	b.n	800262c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d902      	bls.n	80025f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3303      	adds	r3, #3
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68d9      	ldr	r1, [r3, #12]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4603      	mov	r3, r0
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f002 ffb4 	bl	800557c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	441a      	add	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	441a      	add	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	429a      	cmp	r2, r3
 8002640:	d809      	bhi.n	8002656 <PCD_WriteEmptyTxFifo+0xde>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800264a:	429a      	cmp	r2, r3
 800264c:	d203      	bcs.n	8002656 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1bf      	bne.n	80025d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	d811      	bhi.n	8002686 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	2201      	movs	r2, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	43db      	mvns	r3, r3
 800267c:	6939      	ldr	r1, [r7, #16]
 800267e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002682:	4013      	ands	r3, r2
 8002684:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	333c      	adds	r3, #60	@ 0x3c
 80026a8:	3304      	adds	r3, #4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	799b      	ldrb	r3, [r3, #6]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d17b      	bne.n	80027be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	4a61      	ldr	r2, [pc, #388]	@ (8002858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f240 80b9 	bls.w	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80b3 	beq.w	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f2:	461a      	mov	r2, r3
 80026f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f8:	6093      	str	r3, [r2, #8]
 80026fa:	e0a7      	b.n	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002712:	461a      	mov	r2, r3
 8002714:	2320      	movs	r3, #32
 8002716:	6093      	str	r3, [r2, #8]
 8002718:	e098      	b.n	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 8093 	bne.w	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4a4b      	ldr	r2, [pc, #300]	@ (8002858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d90f      	bls.n	800274e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002744:	461a      	mov	r2, r3
 8002746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800274a:	6093      	str	r3, [r2, #8]
 800274c:	e07e      	b.n	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	3304      	adds	r3, #4
 8002762:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	0159      	lsls	r1, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	440b      	add	r3, r1
 8002770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d114      	bne.n	80027b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002798:	461a      	mov	r2, r3
 800279a:	2101      	movs	r1, #1
 800279c:	f003 f986 	bl	8005aac <USB_EP0_OutStart>
 80027a0:	e006      	b.n	80027b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	441a      	add	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f005 fcea 	bl	8008190 <HAL_PCD_DataOutStageCallback>
 80027bc:	e046      	b.n	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a26      	ldr	r2, [pc, #152]	@ (800285c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d124      	bne.n	8002810 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027dc:	461a      	mov	r2, r3
 80027de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e2:	6093      	str	r3, [r2, #8]
 80027e4:	e032      	b.n	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fc:	461a      	mov	r2, r3
 80027fe:	2320      	movs	r3, #32
 8002800:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4619      	mov	r1, r3
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f005 fcc1 	bl	8008190 <HAL_PCD_DataOutStageCallback>
 800280e:	e01d      	b.n	800284c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d114      	bne.n	8002840 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002838:	461a      	mov	r2, r3
 800283a:	2100      	movs	r1, #0
 800283c:	f003 f936 	bl	8005aac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f005 fca2 	bl	8008190 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	4f54300a 	.word	0x4f54300a
 800285c:	4f54310a 	.word	0x4f54310a

08002860 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	333c      	adds	r3, #60	@ 0x3c
 8002878:	3304      	adds	r3, #4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4a15      	ldr	r2, [pc, #84]	@ (80028e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d90e      	bls.n	80028b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ac:	461a      	mov	r2, r3
 80028ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f005 fc59 	bl	800816c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d90c      	bls.n	80028dc <PCD_EP_OutSetupPacket_int+0x7c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	799b      	ldrb	r3, [r3, #6]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d108      	bne.n	80028dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028d4:	461a      	mov	r2, r3
 80028d6:	2101      	movs	r1, #1
 80028d8:	f003 f8e8 	bl	8005aac <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	4f54300a 	.word	0x4f54300a

080028ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
 80028f8:	4613      	mov	r3, r2
 80028fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d107      	bne.n	800291a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800290a:	883b      	ldrh	r3, [r7, #0]
 800290c:	0419      	lsls	r1, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	430a      	orrs	r2, r1
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
 8002918:	e028      	b.n	800296c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4413      	add	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e00d      	b.n	800294a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	3340      	adds	r3, #64	@ 0x40
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4413      	add	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	3301      	adds	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	3b01      	subs	r3, #1
 8002950:	429a      	cmp	r2, r3
 8002952:	d3ec      	bcc.n	800292e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002954:	883b      	ldrh	r3, [r7, #0]
 8002956:	0418      	lsls	r0, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	3b01      	subs	r3, #1
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	4302      	orrs	r2, r0
 8002964:	3340      	adds	r3, #64	@ 0x40
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029ca:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	10000003 	.word	0x10000003

080029e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	4a22      	ldr	r2, [pc, #136]	@ (8002a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a26:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a32:	f7fe fa47 	bl	8000ec4 <HAL_GetTick>
 8002a36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a38:	e009      	b.n	8002a4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a3a:	f7fe fa43 	bl	8000ec4 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a48:	d901      	bls.n	8002a4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e022      	b.n	8002a94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a4e:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a5a:	d1ee      	bne.n	8002a3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a5c:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a68:	f7fe fa2c 	bl	8000ec4 <HAL_GetTick>
 8002a6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a6e:	e009      	b.n	8002a84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a70:	f7fe fa28 	bl	8000ec4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a7e:	d901      	bls.n	8002a84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e007      	b.n	8002a94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a90:	d1ee      	bne.n	8002a70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40007000 	.word	0x40007000

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002aac:	2300      	movs	r3, #0
 8002aae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e291      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8087 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac8:	4b96      	ldr	r3, [pc, #600]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d00c      	beq.n	8002aee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad4:	4b93      	ldr	r3, [pc, #588]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d112      	bne.n	8002b06 <HAL_RCC_OscConfig+0x62>
 8002ae0:	4b90      	ldr	r3, [pc, #576]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aec:	d10b      	bne.n	8002b06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aee:	4b8d      	ldr	r3, [pc, #564]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d06c      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x130>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d168      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e26b      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x7a>
 8002b10:	4b84      	ldr	r3, [pc, #528]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a83      	ldr	r2, [pc, #524]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e02e      	b.n	8002b7c <HAL_RCC_OscConfig+0xd8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x9c>
 8002b26:	4b7f      	ldr	r3, [pc, #508]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b7c      	ldr	r3, [pc, #496]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7b      	ldr	r2, [pc, #492]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xd8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0xc0>
 8002b4a:	4b76      	ldr	r3, [pc, #472]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a75      	ldr	r2, [pc, #468]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b73      	ldr	r3, [pc, #460]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a72      	ldr	r2, [pc, #456]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0xd8>
 8002b64:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6e      	ldr	r2, [pc, #440]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b6c      	ldr	r3, [pc, #432]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6b      	ldr	r2, [pc, #428]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe f99e 	bl	8000ec4 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f99a 	bl	8000ec4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	@ 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e21f      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b61      	ldr	r3, [pc, #388]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0xe8>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe f98a 	bl	8000ec4 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe f986 	bl	8000ec4 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e20b      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	4b57      	ldr	r3, [pc, #348]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x110>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d069      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be2:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bee:	4b4d      	ldr	r3, [pc, #308]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d11c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x190>
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d116      	bne.n	8002c34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_RCC_OscConfig+0x17a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e1df      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b41      	ldr	r3, [pc, #260]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	493d      	ldr	r1, [pc, #244]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	e040      	b.n	8002cb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d023      	beq.n	8002c84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3c:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a38      	ldr	r2, [pc, #224]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe f93c 	bl	8000ec4 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c50:	f7fe f938 	bl	8000ec4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1bd      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	4b30      	ldr	r3, [pc, #192]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4929      	ldr	r1, [pc, #164]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
 8002c82:	e018      	b.n	8002cb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c84:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a26      	ldr	r2, [pc, #152]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe f918 	bl	8000ec4 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe f914 	bl	8000ec4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e199      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d038      	beq.n	8002d34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d019      	beq.n	8002cfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cce:	4a15      	ldr	r2, [pc, #84]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe f8f5 	bl	8000ec4 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe f8f1 	bl	8000ec4 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e176      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x23a>
 8002cfc:	e01a      	b.n	8002d34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe f8db 	bl	8000ec4 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe f8d7 	bl	8000ec4 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d903      	bls.n	8002d28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e15c      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
 8002d24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	4b91      	ldr	r3, [pc, #580]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ee      	bne.n	8002d12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a4 	beq.w	8002e8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b8b      	ldr	r3, [pc, #556]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b88      	ldr	r3, [pc, #544]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a87      	ldr	r2, [pc, #540]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b85      	ldr	r3, [pc, #532]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	4b82      	ldr	r3, [pc, #520]	@ (8002f74 <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d76:	4b7f      	ldr	r3, [pc, #508]	@ (8002f74 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f74 <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fe f89f 	bl	8000ec4 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fe f89b 	bl	8000ec4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	@ 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e120      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9c:	4b75      	ldr	r3, [pc, #468]	@ (8002f74 <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x31a>
 8002db0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db4:	4a6e      	ldr	r2, [pc, #440]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dbc:	e02d      	b.n	8002e1a <HAL_RCC_OscConfig+0x376>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x33c>
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	4a69      	ldr	r2, [pc, #420]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd2:	4b67      	ldr	r3, [pc, #412]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	4a66      	ldr	r2, [pc, #408]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dde:	e01c      	b.n	8002e1a <HAL_RCC_OscConfig+0x376>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x35e>
 8002de8:	4b61      	ldr	r3, [pc, #388]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	4a60      	ldr	r2, [pc, #384]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e00:	e00b      	b.n	8002e1a <HAL_RCC_OscConfig+0x376>
 8002e02:	4b5b      	ldr	r3, [pc, #364]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e06:	4a5a      	ldr	r2, [pc, #360]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0e:	4b58      	ldr	r3, [pc, #352]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e12:	4a57      	ldr	r2, [pc, #348]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fe f84f 	bl	8000ec4 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe f84b 	bl	8000ec4 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0ce      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ee      	beq.n	8002e2a <HAL_RCC_OscConfig+0x386>
 8002e4c:	e014      	b.n	8002e78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7fe f839 	bl	8000ec4 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fe f835 	bl	8000ec4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	4b40      	ldr	r3, [pc, #256]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	4a3b      	ldr	r2, [pc, #236]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80a4 	beq.w	8002fdc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e94:	4b36      	ldr	r3, [pc, #216]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d06b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d149      	bne.n	8002f3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a30      	ldr	r2, [pc, #192]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe f806 	bl	8000ec4 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe f802 	bl	8000ec4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e087      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	4b28      	ldr	r3, [pc, #160]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	4313      	orrs	r3, r2
 8002f00:	4a1b      	ldr	r2, [pc, #108]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f08:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fd ffd6 	bl	8000ec4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fd ffd2 	bl	8000ec4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e057      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x478>
 8002f3a:	e04f      	b.n	8002fdc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0b      	ldr	r2, [pc, #44]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fd ffbc 	bl	8000ec4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fd ffb8 	bl	8000ec4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e03d      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4ac>
 8002f6e:	e035      	b.n	8002fdc <HAL_RCC_OscConfig+0x538>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <HAL_RCC_OscConfig+0x544>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d028      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d121      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d11a      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fa8:	4013      	ands	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d111      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0d0      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b6a      	ldr	r3, [pc, #424]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d910      	bls.n	8003034 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b67      	ldr	r3, [pc, #412]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 020f 	bic.w	r2, r3, #15
 800301a:	4965      	ldr	r1, [pc, #404]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b63      	ldr	r3, [pc, #396]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b8      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800304c:	4b59      	ldr	r3, [pc, #356]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a58      	ldr	r2, [pc, #352]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003052:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003056:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003064:	4b53      	ldr	r3, [pc, #332]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a52      	ldr	r2, [pc, #328]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800306e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003070:	4b50      	ldr	r3, [pc, #320]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	494d      	ldr	r1, [pc, #308]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d040      	beq.n	8003110 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b47      	ldr	r3, [pc, #284]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d115      	bne.n	80030ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e07f      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ae:	4b41      	ldr	r3, [pc, #260]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e073      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030be:	4b3d      	ldr	r3, [pc, #244]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06b      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ce:	4b39      	ldr	r3, [pc, #228]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f023 0203 	bic.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4936      	ldr	r1, [pc, #216]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e0:	f7fd fef0 	bl	8000ec4 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e8:	f7fd feec 	bl	8000ec4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e053      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	4b2d      	ldr	r3, [pc, #180]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 020c 	and.w	r2, r3, #12
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	429a      	cmp	r2, r3
 800310e:	d1eb      	bne.n	80030e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003110:	4b27      	ldr	r3, [pc, #156]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d210      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 020f 	bic.w	r2, r3, #15
 8003126:	4922      	ldr	r1, [pc, #136]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e032      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4916      	ldr	r1, [pc, #88]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	490e      	ldr	r1, [pc, #56]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317e:	f000 f821 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8003182:	4602      	mov	r2, r0
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	490a      	ldr	r1, [pc, #40]	@ (80031b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003190:	5ccb      	ldrb	r3, [r1, r3]
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	4a09      	ldr	r2, [pc, #36]	@ (80031bc <HAL_RCC_ClockConfig+0x1d0>)
 8003198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800319a:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <HAL_RCC_ClockConfig+0x1d4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fe4c 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023c00 	.word	0x40023c00
 80031b4:	40023800 	.word	0x40023800
 80031b8:	08008a78 	.word	0x08008a78
 80031bc:	20000000 	.word	0x20000000
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c8:	b094      	sub	sp, #80	@ 0x50
 80031ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d0:	2300      	movs	r3, #0
 80031d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d4:	2300      	movs	r3, #0
 80031d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031dc:	4b79      	ldr	r3, [pc, #484]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d00d      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x40>
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	f200 80e1 	bhi.w	80033b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x34>
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x3a>
 80031f6:	e0db      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f8:	4b73      	ldr	r3, [pc, #460]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031fc:	e0db      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031fe:	4b73      	ldr	r3, [pc, #460]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003200:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003202:	e0d8      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003204:	4b6f      	ldr	r3, [pc, #444]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800320c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800320e:	4b6d      	ldr	r3, [pc, #436]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d063      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	4b6a      	ldr	r3, [pc, #424]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	2200      	movs	r2, #0
 8003222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003224:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	633b      	str	r3, [r7, #48]	@ 0x30
 800322e:	2300      	movs	r3, #0
 8003230:	637b      	str	r3, [r7, #52]	@ 0x34
 8003232:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003236:	4622      	mov	r2, r4
 8003238:	462b      	mov	r3, r5
 800323a:	f04f 0000 	mov.w	r0, #0
 800323e:	f04f 0100 	mov.w	r1, #0
 8003242:	0159      	lsls	r1, r3, #5
 8003244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003248:	0150      	lsls	r0, r2, #5
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4621      	mov	r1, r4
 8003250:	1a51      	subs	r1, r2, r1
 8003252:	6139      	str	r1, [r7, #16]
 8003254:	4629      	mov	r1, r5
 8003256:	eb63 0301 	sbc.w	r3, r3, r1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003268:	4659      	mov	r1, fp
 800326a:	018b      	lsls	r3, r1, #6
 800326c:	4651      	mov	r1, sl
 800326e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003272:	4651      	mov	r1, sl
 8003274:	018a      	lsls	r2, r1, #6
 8003276:	4651      	mov	r1, sl
 8003278:	ebb2 0801 	subs.w	r8, r2, r1
 800327c:	4659      	mov	r1, fp
 800327e:	eb63 0901 	sbc.w	r9, r3, r1
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800328e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003296:	4690      	mov	r8, r2
 8003298:	4699      	mov	r9, r3
 800329a:	4623      	mov	r3, r4
 800329c:	eb18 0303 	adds.w	r3, r8, r3
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	462b      	mov	r3, r5
 80032a4:	eb49 0303 	adc.w	r3, r9, r3
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032b6:	4629      	mov	r1, r5
 80032b8:	024b      	lsls	r3, r1, #9
 80032ba:	4621      	mov	r1, r4
 80032bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032c0:	4621      	mov	r1, r4
 80032c2:	024a      	lsls	r2, r1, #9
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ca:	2200      	movs	r2, #0
 80032cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032d4:	f7fd f9a4 	bl	8000620 <__aeabi_uldivmod>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4613      	mov	r3, r2
 80032de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e0:	e058      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b38      	ldr	r3, [pc, #224]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	2200      	movs	r2, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	4611      	mov	r1, r2
 80032ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032f2:	623b      	str	r3, [r7, #32]
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032fc:	4642      	mov	r2, r8
 80032fe:	464b      	mov	r3, r9
 8003300:	f04f 0000 	mov.w	r0, #0
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	0159      	lsls	r1, r3, #5
 800330a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330e:	0150      	lsls	r0, r2, #5
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4641      	mov	r1, r8
 8003316:	ebb2 0a01 	subs.w	sl, r2, r1
 800331a:	4649      	mov	r1, r9
 800331c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800332c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003334:	ebb2 040a 	subs.w	r4, r2, sl
 8003338:	eb63 050b 	sbc.w	r5, r3, fp
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	00eb      	lsls	r3, r5, #3
 8003346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334a:	00e2      	lsls	r2, r4, #3
 800334c:	4614      	mov	r4, r2
 800334e:	461d      	mov	r5, r3
 8003350:	4643      	mov	r3, r8
 8003352:	18e3      	adds	r3, r4, r3
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	464b      	mov	r3, r9
 8003358:	eb45 0303 	adc.w	r3, r5, r3
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800336a:	4629      	mov	r1, r5
 800336c:	028b      	lsls	r3, r1, #10
 800336e:	4621      	mov	r1, r4
 8003370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003374:	4621      	mov	r1, r4
 8003376:	028a      	lsls	r2, r1, #10
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800337e:	2200      	movs	r2, #0
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	61fa      	str	r2, [r7, #28]
 8003384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003388:	f7fd f94a 	bl	8000620 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	3301      	adds	r3, #1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ae:	e002      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3750      	adds	r7, #80	@ 0x50
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	007a1200 	.word	0x007a1200

080033d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000000 	.word	0x20000000

080033e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003410:	4b69      	ldr	r3, [pc, #420]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a68      	ldr	r2, [pc, #416]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800341a:	6093      	str	r3, [r2, #8]
 800341c:	4b66      	ldr	r3, [pc, #408]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003424:	4964      	ldr	r1, [pc, #400]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003432:	2301      	movs	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d017      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003442:	4b5d      	ldr	r3, [pc, #372]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003448:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003450:	4959      	ldr	r1, [pc, #356]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003460:	d101      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003462:	2301      	movs	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d017      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800347e:	4b4e      	ldr	r3, [pc, #312]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003484:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	494a      	ldr	r1, [pc, #296]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800349c:	d101      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 808b 	beq.w	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034cc:	4b3a      	ldr	r3, [pc, #232]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	4a39      	ldr	r2, [pc, #228]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d8:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034e4:	4b35      	ldr	r3, [pc, #212]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a34      	ldr	r2, [pc, #208]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fd fce8 	bl	8000ec4 <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f8:	f7fd fce4 	bl	8000ec4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e357      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800350a:	4b2c      	ldr	r3, [pc, #176]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003516:	4b28      	ldr	r3, [pc, #160]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d035      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	429a      	cmp	r2, r3
 8003532:	d02e      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003534:	4b20      	ldr	r3, [pc, #128]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353e:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003542:	4a1d      	ldr	r2, [pc, #116]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003548:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800354a:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003554:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003556:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800355c:	4b16      	ldr	r3, [pc, #88]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d114      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd fcac 	bl	8000ec4 <HAL_GetTick>
 800356c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356e:	e00a      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fd fca8 	bl	8000ec4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e319      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0ee      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800359e:	d111      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035ac:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	4901      	ldr	r1, [pc, #4]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
 80035b6:	e00b      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000
 80035c0:	0ffffcff 	.word	0x0ffffcff
 80035c4:	4baa      	ldr	r3, [pc, #680]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4aa9      	ldr	r2, [pc, #676]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80035ce:	6093      	str	r3, [r2, #8]
 80035d0:	4ba7      	ldr	r3, [pc, #668]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035dc:	49a4      	ldr	r1, [pc, #656]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d010      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ee:	4ba0      	ldr	r3, [pc, #640]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f4:	4a9e      	ldr	r2, [pc, #632]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035fe:	4b9c      	ldr	r3, [pc, #624]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003600:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	4999      	ldr	r1, [pc, #612]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800361c:	4b94      	ldr	r3, [pc, #592]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003622:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800362a:	4991      	ldr	r1, [pc, #580]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800363e:	4b8c      	ldr	r3, [pc, #560]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003644:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800364c:	4988      	ldr	r1, [pc, #544]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003660:	4b83      	ldr	r3, [pc, #524]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366e:	4980      	ldr	r1, [pc, #512]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003682:	4b7b      	ldr	r3, [pc, #492]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003688:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	4977      	ldr	r1, [pc, #476]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a4:	4b72      	ldr	r3, [pc, #456]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	496f      	ldr	r1, [pc, #444]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036cc:	f023 020c 	bic.w	r2, r3, #12
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d4:	4966      	ldr	r1, [pc, #408]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036e8:	4b61      	ldr	r3, [pc, #388]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f6:	495e      	ldr	r1, [pc, #376]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800370a:	4b59      	ldr	r3, [pc, #356]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003710:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003718:	4955      	ldr	r1, [pc, #340]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800372c:	4b50      	ldr	r3, [pc, #320]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003732:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	494d      	ldr	r1, [pc, #308]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800374e:	4b48      	ldr	r3, [pc, #288]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003754:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	4944      	ldr	r1, [pc, #272]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003770:	4b3f      	ldr	r3, [pc, #252]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377e:	493c      	ldr	r1, [pc, #240]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003792:	4b37      	ldr	r3, [pc, #220]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003798:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a0:	4933      	ldr	r1, [pc, #204]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c2:	492b      	ldr	r1, [pc, #172]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d011      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037d6:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037dc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037e4:	4922      	ldr	r1, [pc, #136]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037f4:	d101      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037f6:	2301      	movs	r3, #1
 80037f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003806:	2301      	movs	r3, #1
 8003808:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003816:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003824:	4912      	ldr	r1, [pc, #72]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003838:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003848:	4909      	ldr	r1, [pc, #36]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d006      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80d9 	beq.w	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003864:	4b02      	ldr	r3, [pc, #8]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a01      	ldr	r2, [pc, #4]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800386e:	e001      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003870:	40023800 	.word	0x40023800
 8003874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003876:	f7fd fb25 	bl	8000ec4 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800387e:	f7fd fb21 	bl	8000ec4 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b64      	cmp	r3, #100	@ 0x64
 800388a:	d901      	bls.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e194      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003890:	4b6c      	ldr	r3, [pc, #432]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d021      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d11d      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038b0:	4b64      	ldr	r3, [pc, #400]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038be:	4b61      	ldr	r3, [pc, #388]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c4:	0e1b      	lsrs	r3, r3, #24
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	019a      	lsls	r2, r3, #6
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	061b      	lsls	r3, r3, #24
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	071b      	lsls	r3, r3, #28
 80038e4:	4957      	ldr	r1, [pc, #348]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02e      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003916:	d129      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003918:	4b4a      	ldr	r3, [pc, #296]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800392c:	0f1b      	lsrs	r3, r3, #28
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	019a      	lsls	r2, r3, #6
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	431a      	orrs	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	071b      	lsls	r3, r3, #28
 800394c:	493d      	ldr	r1, [pc, #244]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003954:	4b3b      	ldr	r3, [pc, #236]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800395a:	f023 021f 	bic.w	r2, r3, #31
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	3b01      	subs	r3, #1
 8003964:	4937      	ldr	r1, [pc, #220]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01d      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003978:	4b32      	ldr	r3, [pc, #200]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800397a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800397e:	0e1b      	lsrs	r3, r3, #24
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003986:	4b2f      	ldr	r3, [pc, #188]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398c:	0f1b      	lsrs	r3, r3, #28
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	019a      	lsls	r2, r3, #6
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	431a      	orrs	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	061b      	lsls	r3, r3, #24
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	071b      	lsls	r3, r3, #28
 80039ac:	4925      	ldr	r1, [pc, #148]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d011      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	019a      	lsls	r2, r3, #6
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	061b      	lsls	r3, r3, #24
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	071b      	lsls	r3, r3, #28
 80039dc:	4919      	ldr	r1, [pc, #100]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039e4:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a16      	ldr	r2, [pc, #88]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f0:	f7fd fa68 	bl	8000ec4 <HAL_GetTick>
 80039f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039f8:	f7fd fa64 	bl	8000ec4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	@ 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0d7      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f040 80cd 	bne.w	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a1e:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a08      	ldr	r2, [pc, #32]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2a:	f7fd fa4b 	bl	8000ec4 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a32:	f7fd fa47 	bl	8000ec4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b64      	cmp	r3, #100	@ 0x64
 8003a3e:	d903      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0ba      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a48:	4b5e      	ldr	r3, [pc, #376]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a54:	d0ed      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d12a      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a7e:	4b51      	ldr	r3, [pc, #324]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a92:	0f1b      	lsrs	r3, r3, #28
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	4944      	ldr	r1, [pc, #272]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003aba:	4b42      	ldr	r3, [pc, #264]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	493d      	ldr	r1, [pc, #244]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d022      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ae8:	d11d      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aea:	4b36      	ldr	r3, [pc, #216]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af0:	0e1b      	lsrs	r3, r3, #24
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003af8:	4b32      	ldr	r3, [pc, #200]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afe:	0f1b      	lsrs	r3, r3, #28
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	019a      	lsls	r2, r3, #6
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	061b      	lsls	r3, r3, #24
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	071b      	lsls	r3, r3, #28
 8003b1e:	4929      	ldr	r1, [pc, #164]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d028      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b32:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	0e1b      	lsrs	r3, r3, #24
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b40:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	019a      	lsls	r2, r3, #6
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	071b      	lsls	r3, r3, #28
 8003b66:	4917      	ldr	r1, [pc, #92]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b6e:	4b15      	ldr	r3, [pc, #84]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	4911      	ldr	r1, [pc, #68]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b84:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fd f998 	bl	8000ec4 <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b98:	f7fd f994 	bl	8000ec4 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e007      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003baa:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb6:	d1ef      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800

08003bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e049      	b.n	8003c6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fc fff0 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f000 fab2 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d001      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e054      	b.n	8003d3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a26      	ldr	r2, [pc, #152]	@ (8003d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d022      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cba:	d01d      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	@ (8003d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d018      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a21      	ldr	r2, [pc, #132]	@ (8003d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1e      	ldr	r2, [pc, #120]	@ (8003d58 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d5c <HAL_TIM_Base_Start_IT+0xe4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d60 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d115      	bne.n	8003d24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_TIM_Base_Start_IT+0xec>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d015      	beq.n	8003d36 <HAL_TIM_Base_Start_IT+0xbe>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d011      	beq.n	8003d36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	e008      	b.n	8003d36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e000      	b.n	8003d38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40010400 	.word	0x40010400
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40001800 	.word	0x40001800
 8003d64:	00010007 	.word	0x00010007

08003d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d020      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01b      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0202 	mvn.w	r2, #2
 8003d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f9be 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9b0 	bl	8004120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f9c1 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d020      	beq.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01b      	beq.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0204 	mvn.w	r2, #4
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f998 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f98a 	bl	8004120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f99b 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d020      	beq.n	8003e64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01b      	beq.n	8003e64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0208 	mvn.w	r2, #8
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f972 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f964 	bl	8004120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f975 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d020      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01b      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0210 	mvn.w	r2, #16
 8003e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2208      	movs	r2, #8
 8003e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f94c 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f93e 	bl	8004120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f94f 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0201 	mvn.w	r2, #1
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f91c 	bl	800410c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00c      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fb15 	bl	800452c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00c      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fb0d 	bl	8004540 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00c      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f909 	bl	800415c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00c      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0220 	mvn.w	r2, #32
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fad5 	bl	8004518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIM_ConfigClockSource+0x1c>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0b4      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x186>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	4b56      	ldr	r3, [pc, #344]	@ (8004108 <HAL_TIM_ConfigClockSource+0x190>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fcc:	d03e      	beq.n	800404c <HAL_TIM_ConfigClockSource+0xd4>
 8003fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd2:	f200 8087 	bhi.w	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fda:	f000 8086 	beq.w	80040ea <HAL_TIM_ConfigClockSource+0x172>
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe2:	d87f      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b70      	cmp	r3, #112	@ 0x70
 8003fe6:	d01a      	beq.n	800401e <HAL_TIM_ConfigClockSource+0xa6>
 8003fe8:	2b70      	cmp	r3, #112	@ 0x70
 8003fea:	d87b      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b60      	cmp	r3, #96	@ 0x60
 8003fee:	d050      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0x11a>
 8003ff0:	2b60      	cmp	r3, #96	@ 0x60
 8003ff2:	d877      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b50      	cmp	r3, #80	@ 0x50
 8003ff6:	d03c      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0xfa>
 8003ff8:	2b50      	cmp	r3, #80	@ 0x50
 8003ffa:	d873      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b40      	cmp	r3, #64	@ 0x40
 8003ffe:	d058      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004000:	2b40      	cmp	r3, #64	@ 0x40
 8004002:	d86f      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b30      	cmp	r3, #48	@ 0x30
 8004006:	d064      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	2b30      	cmp	r3, #48	@ 0x30
 800400a:	d86b      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b20      	cmp	r3, #32
 800400e:	d060      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	2b20      	cmp	r3, #32
 8004012:	d867      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d05c      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	2b10      	cmp	r3, #16
 800401a:	d05a      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 800401c:	e062      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	f000 f9c5 	bl	80043bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
      break;
 800404a:	e04f      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800405c:	f000 f9ae 	bl	80043bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800406e:	609a      	str	r2, [r3, #8]
      break;
 8004070:	e03c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407e:	461a      	mov	r2, r3
 8004080:	f000 f922 	bl	80042c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2150      	movs	r1, #80	@ 0x50
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f97b 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 8004090:	e02c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800409e:	461a      	mov	r2, r3
 80040a0:	f000 f941 	bl	8004326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2160      	movs	r1, #96	@ 0x60
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f96b 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 80040b0:	e01c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 f902 	bl	80042c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2140      	movs	r1, #64	@ 0x40
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f95b 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 80040d0:	e00c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f000 f952 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 80040e2:	e003      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e000      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	fffeff88 	.word	0xfffeff88

0800410c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a46      	ldr	r2, [pc, #280]	@ (800429c <TIM_Base_SetConfig+0x12c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418e:	d00f      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a43      	ldr	r2, [pc, #268]	@ (80042a0 <TIM_Base_SetConfig+0x130>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a42      	ldr	r2, [pc, #264]	@ (80042a4 <TIM_Base_SetConfig+0x134>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a41      	ldr	r2, [pc, #260]	@ (80042a8 <TIM_Base_SetConfig+0x138>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a40      	ldr	r2, [pc, #256]	@ (80042ac <TIM_Base_SetConfig+0x13c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a35      	ldr	r2, [pc, #212]	@ (800429c <TIM_Base_SetConfig+0x12c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d0:	d027      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a32      	ldr	r2, [pc, #200]	@ (80042a0 <TIM_Base_SetConfig+0x130>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d023      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a31      	ldr	r2, [pc, #196]	@ (80042a4 <TIM_Base_SetConfig+0x134>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a30      	ldr	r2, [pc, #192]	@ (80042a8 <TIM_Base_SetConfig+0x138>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a2f      	ldr	r2, [pc, #188]	@ (80042ac <TIM_Base_SetConfig+0x13c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d017      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2e      	ldr	r2, [pc, #184]	@ (80042b0 <TIM_Base_SetConfig+0x140>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a2d      	ldr	r2, [pc, #180]	@ (80042b4 <TIM_Base_SetConfig+0x144>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2c      	ldr	r2, [pc, #176]	@ (80042b8 <TIM_Base_SetConfig+0x148>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2b      	ldr	r2, [pc, #172]	@ (80042bc <TIM_Base_SetConfig+0x14c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2a      	ldr	r2, [pc, #168]	@ (80042c0 <TIM_Base_SetConfig+0x150>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a29      	ldr	r2, [pc, #164]	@ (80042c4 <TIM_Base_SetConfig+0x154>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a10      	ldr	r2, [pc, #64]	@ (800429c <TIM_Base_SetConfig+0x12c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0xf8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <TIM_Base_SetConfig+0x13c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d103      	bne.n	8004270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	611a      	str	r2, [r3, #16]
  }
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40010400 	.word	0x40010400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800
 80042bc:	40001800 	.word	0x40001800
 80042c0:	40001c00 	.word	0x40001c00
 80042c4:	40002000 	.word	0x40002000

080042c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f023 0201 	bic.w	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f023 030a 	bic.w	r3, r3, #10
 8004304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004326:	b480      	push	{r7}
 8004328:	b087      	sub	sp, #28
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0210 	bic.w	r2, r3, #16
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004362:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f043 0307 	orr.w	r3, r3, #7
 80043a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	609a      	str	r2, [r3, #8]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	431a      	orrs	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004410:	2302      	movs	r3, #2
 8004412:	e06d      	b.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a30      	ldr	r2, [pc, #192]	@ (80044fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2f      	ldr	r2, [pc, #188]	@ (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800444e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004460:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a20      	ldr	r2, [pc, #128]	@ (80044fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004486:	d01d      	beq.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1d      	ldr	r2, [pc, #116]	@ (8004504 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1c      	ldr	r2, [pc, #112]	@ (8004508 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1a      	ldr	r2, [pc, #104]	@ (800450c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a15      	ldr	r2, [pc, #84]	@ (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a16      	ldr	r2, [pc, #88]	@ (8004510 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a15      	ldr	r2, [pc, #84]	@ (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10c      	bne.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40014000 	.word	0x40014000
 8004514:	40001800 	.word	0x40001800

08004518 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004554:	b084      	sub	sp, #16
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	f107 001c 	add.w	r0, r7, #28
 8004562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004566:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800456a:	2b01      	cmp	r3, #1
 800456c:	d121      	bne.n	80045b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004572:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	4b21      	ldr	r3, [pc, #132]	@ (8004604 <USB_CoreInit+0xb0>)
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004592:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 fade 	bl	8005b68 <USB_CoreReset>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e010      	b.n	80045d4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f001 fad2 	bl	8005b68 <USB_CoreReset>
 80045c4:	4603      	mov	r3, r0
 80045c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80045d4:	7fbb      	ldrb	r3, [r7, #30]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d10b      	bne.n	80045f2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f043 0206 	orr.w	r2, r3, #6
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045fe:	b004      	add	sp, #16
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	ffbdffbf 	.word	0xffbdffbf

08004608 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d165      	bne.n	80046e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a41      	ldr	r2, [pc, #260]	@ (8004724 <USB_SetTurnaroundTime+0x11c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d906      	bls.n	8004632 <USB_SetTurnaroundTime+0x2a>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4a40      	ldr	r2, [pc, #256]	@ (8004728 <USB_SetTurnaroundTime+0x120>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d202      	bcs.n	8004632 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800462c:	230f      	movs	r3, #15
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e062      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a3c      	ldr	r2, [pc, #240]	@ (8004728 <USB_SetTurnaroundTime+0x120>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d306      	bcc.n	8004648 <USB_SetTurnaroundTime+0x40>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4a3b      	ldr	r2, [pc, #236]	@ (800472c <USB_SetTurnaroundTime+0x124>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d202      	bcs.n	8004648 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004642:	230e      	movs	r3, #14
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e057      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a38      	ldr	r2, [pc, #224]	@ (800472c <USB_SetTurnaroundTime+0x124>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d306      	bcc.n	800465e <USB_SetTurnaroundTime+0x56>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4a37      	ldr	r2, [pc, #220]	@ (8004730 <USB_SetTurnaroundTime+0x128>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d202      	bcs.n	800465e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004658:	230d      	movs	r3, #13
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e04c      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a33      	ldr	r2, [pc, #204]	@ (8004730 <USB_SetTurnaroundTime+0x128>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d306      	bcc.n	8004674 <USB_SetTurnaroundTime+0x6c>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a32      	ldr	r2, [pc, #200]	@ (8004734 <USB_SetTurnaroundTime+0x12c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d802      	bhi.n	8004674 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800466e:	230c      	movs	r3, #12
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e041      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a2f      	ldr	r2, [pc, #188]	@ (8004734 <USB_SetTurnaroundTime+0x12c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d906      	bls.n	800468a <USB_SetTurnaroundTime+0x82>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a2e      	ldr	r2, [pc, #184]	@ (8004738 <USB_SetTurnaroundTime+0x130>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d802      	bhi.n	800468a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004684:	230b      	movs	r3, #11
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	e036      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a2a      	ldr	r2, [pc, #168]	@ (8004738 <USB_SetTurnaroundTime+0x130>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d906      	bls.n	80046a0 <USB_SetTurnaroundTime+0x98>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a29      	ldr	r2, [pc, #164]	@ (800473c <USB_SetTurnaroundTime+0x134>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d802      	bhi.n	80046a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800469a:	230a      	movs	r3, #10
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e02b      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a26      	ldr	r2, [pc, #152]	@ (800473c <USB_SetTurnaroundTime+0x134>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d906      	bls.n	80046b6 <USB_SetTurnaroundTime+0xae>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a25      	ldr	r2, [pc, #148]	@ (8004740 <USB_SetTurnaroundTime+0x138>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d202      	bcs.n	80046b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046b0:	2309      	movs	r3, #9
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e020      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a21      	ldr	r2, [pc, #132]	@ (8004740 <USB_SetTurnaroundTime+0x138>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d306      	bcc.n	80046cc <USB_SetTurnaroundTime+0xc4>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4a20      	ldr	r2, [pc, #128]	@ (8004744 <USB_SetTurnaroundTime+0x13c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d802      	bhi.n	80046cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046c6:	2308      	movs	r3, #8
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e015      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004744 <USB_SetTurnaroundTime+0x13c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d906      	bls.n	80046e2 <USB_SetTurnaroundTime+0xda>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004748 <USB_SetTurnaroundTime+0x140>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d202      	bcs.n	80046e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046dc:	2307      	movs	r3, #7
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e00a      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046e2:	2306      	movs	r3, #6
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e007      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046ee:	2309      	movs	r3, #9
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	e001      	b.n	80046f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046f4:	2309      	movs	r3, #9
 80046f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	029b      	lsls	r3, r3, #10
 800470c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004710:	431a      	orrs	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	00d8acbf 	.word	0x00d8acbf
 8004728:	00e4e1c0 	.word	0x00e4e1c0
 800472c:	00f42400 	.word	0x00f42400
 8004730:	01067380 	.word	0x01067380
 8004734:	011a499f 	.word	0x011a499f
 8004738:	01312cff 	.word	0x01312cff
 800473c:	014ca43f 	.word	0x014ca43f
 8004740:	016e3600 	.word	0x016e3600
 8004744:	01a6ab1f 	.word	0x01a6ab1f
 8004748:	01e84800 	.word	0x01e84800

0800474c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f043 0201 	orr.w	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 0201 	bic.w	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d115      	bne.n	80047de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047be:	200a      	movs	r0, #10
 80047c0:	f7fc fb8c 	bl	8000edc <HAL_Delay>
      ms += 10U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	330a      	adds	r3, #10
 80047c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 f93b 	bl	8005a46 <USB_GetMode>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d01e      	beq.n	8004814 <USB_SetCurrentMode+0x84>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80047da:	d9f0      	bls.n	80047be <USB_SetCurrentMode+0x2e>
 80047dc:	e01a      	b.n	8004814 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d115      	bne.n	8004810 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047f0:	200a      	movs	r0, #10
 80047f2:	f7fc fb73 	bl	8000edc <HAL_Delay>
      ms += 10U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	330a      	adds	r3, #10
 80047fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f001 f922 	bl	8005a46 <USB_GetMode>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <USB_SetCurrentMode+0x84>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2bc7      	cmp	r3, #199	@ 0xc7
 800480c:	d9f0      	bls.n	80047f0 <USB_SetCurrentMode+0x60>
 800480e:	e001      	b.n	8004814 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e005      	b.n	8004820 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2bc8      	cmp	r3, #200	@ 0xc8
 8004818:	d101      	bne.n	800481e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004828:	b084      	sub	sp, #16
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	e009      	b.n	800485c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	3340      	adds	r3, #64	@ 0x40
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	2200      	movs	r2, #0
 8004854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3301      	adds	r3, #1
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b0e      	cmp	r3, #14
 8004860:	d9f2      	bls.n	8004848 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004862:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11c      	bne.n	80048a4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e005      	b.n	80048b0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048b6:	461a      	mov	r2, r3
 80048b8:	2300      	movs	r3, #0
 80048ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048bc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10d      	bne.n	80048e0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048cc:	2100      	movs	r1, #0
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f968 	bl	8004ba4 <USB_SetDevSpeed>
 80048d4:	e008      	b.n	80048e8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048d6:	2101      	movs	r1, #1
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f963 	bl	8004ba4 <USB_SetDevSpeed>
 80048de:	e003      	b.n	80048e8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048e0:	2103      	movs	r1, #3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f95e 	bl	8004ba4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048e8:	2110      	movs	r1, #16
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8fa 	bl	8004ae4 <USB_FlushTxFifo>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f924 	bl	8004b48 <USB_FlushRxFifo>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004910:	461a      	mov	r2, r3
 8004912:	2300      	movs	r3, #0
 8004914:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004928:	461a      	mov	r2, r3
 800492a:	2300      	movs	r3, #0
 800492c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e043      	b.n	80049bc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004946:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800494a:	d118      	bne.n	800497e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495e:	461a      	mov	r2, r3
 8004960:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e013      	b.n	8004990 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004974:	461a      	mov	r2, r3
 8004976:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e008      	b.n	8004990 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498a:	461a      	mov	r2, r3
 800498c:	2300      	movs	r3, #0
 800498e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499c:	461a      	mov	r2, r3
 800499e:	2300      	movs	r3, #0
 80049a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ae:	461a      	mov	r2, r3
 80049b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3301      	adds	r3, #1
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049c0:	461a      	mov	r2, r3
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d3b5      	bcc.n	8004934 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e043      	b.n	8004a56 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049e4:	d118      	bne.n	8004a18 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	e013      	b.n	8004a2a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e008      	b.n	8004a2a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a24:	461a      	mov	r2, r3
 8004a26:	2300      	movs	r3, #0
 8004a28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	3301      	adds	r3, #1
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d3b5      	bcc.n	80049ce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f043 0210 	orr.w	r2, r3, #16
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <USB_DevInit+0x2b4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004aa4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f043 0208 	orr.w	r2, r3, #8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ab8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <USB_DevInit+0x2b8>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ad8:	b004      	add	sp, #16
 8004ada:	4770      	bx	lr
 8004adc:	803c3800 	.word	0x803c3800
 8004ae0:	40000004 	.word	0x40000004

08004ae4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3301      	adds	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004afe:	d901      	bls.n	8004b04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e01b      	b.n	8004b3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	daf2      	bge.n	8004af2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	019b      	lsls	r3, r3, #6
 8004b14:	f043 0220 	orr.w	r2, r3, #32
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b28:	d901      	bls.n	8004b2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e006      	b.n	8004b3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d0f0      	beq.n	8004b1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b60:	d901      	bls.n	8004b66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e018      	b.n	8004b98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	daf2      	bge.n	8004b54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2210      	movs	r2, #16
 8004b76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b84:	d901      	bls.n	8004b8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e006      	b.n	8004b98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d0f0      	beq.n	8004b78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0306 	and.w	r3, r3, #6
 8004bee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
 8004bfa:	e00a      	b.n	8004c12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d002      	beq.n	8004c08 <USB_GetDevSpeed+0x32>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b06      	cmp	r3, #6
 8004c06:	d102      	bne.n	8004c0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	75fb      	strb	r3, [r7, #23]
 8004c0c:	e001      	b.n	8004c12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c0e:	230f      	movs	r3, #15
 8004c10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d139      	bne.n	8004cb0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	68f9      	ldr	r1, [r7, #12]
 8004c56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d153      	bne.n	8004d1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	791b      	ldrb	r3, [r3, #4]
 8004c8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	059b      	lsls	r3, r3, #22
 8004c96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	0159      	lsls	r1, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4b20      	ldr	r3, [pc, #128]	@ (8004d2c <USB_ActivateEndpoint+0x10c>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]
 8004cae:	e035      	b.n	8004d1c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	68f9      	ldr	r1, [r7, #12]
 8004cca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d119      	bne.n	8004d1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	791b      	ldrb	r3, [r3, #4]
 8004d02:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d04:	430b      	orrs	r3, r1
 8004d06:	431a      	orrs	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	0159      	lsls	r1, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	440b      	add	r3, r1
 8004d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d14:	4619      	mov	r1, r3
 8004d16:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <USB_ActivateEndpoint+0x10c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	10008000 	.word	0x10008000

08004d30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d161      	bne.n	8004e10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d62:	d11f      	bne.n	8004da4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004da2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	68f9      	ldr	r1, [r7, #12]
 8004de4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004de8:	4013      	ands	r3, r2
 8004dea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	0159      	lsls	r1, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	440b      	add	r3, r1
 8004e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e06:	4619      	mov	r1, r3
 8004e08:	4b35      	ldr	r3, [pc, #212]	@ (8004ee0 <USB_DeactivateEndpoint+0x1b0>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
 8004e0e:	e060      	b.n	8004ed2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e26:	d11f      	bne.n	8004e68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	2101      	movs	r1, #1
 8004e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	43db      	mvns	r3, r3
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e88:	4013      	ands	r3, r2
 8004e8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004eac:	4013      	ands	r3, r2
 8004eae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	0159      	lsls	r1, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <USB_DeactivateEndpoint+0x1b4>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	ec337800 	.word	0xec337800
 8004ee4:	eff37800 	.word	0xeff37800

08004ee8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	@ 0x28
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	f040 8181 	bne.w	800520c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d132      	bne.n	8004f78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	0159      	lsls	r1, r3, #5
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	440b      	add	r3, r1
 8004f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4ba5      	ldr	r3, [pc, #660]	@ (80051c4 <USB_EPStartXfer+0x2dc>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	0159      	lsls	r1, r3, #5
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	440b      	add	r3, r1
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4b95      	ldr	r3, [pc, #596]	@ (80051c8 <USB_EPStartXfer+0x2e0>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	610b      	str	r3, [r1, #16]
 8004f76:	e092      	b.n	800509e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	0159      	lsls	r1, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	440b      	add	r3, r1
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f92:	4619      	mov	r1, r3
 8004f94:	4b8c      	ldr	r3, [pc, #560]	@ (80051c8 <USB_EPStartXfer+0x2e0>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	0159      	lsls	r1, r3, #5
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	440b      	add	r3, r1
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4b83      	ldr	r3, [pc, #524]	@ (80051c4 <USB_EPStartXfer+0x2dc>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11a      	bne.n	8004ff8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d903      	bls.n	8004fd6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ff0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ff4:	6113      	str	r3, [r2, #16]
 8004ff6:	e01b      	b.n	8005030 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005004:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6919      	ldr	r1, [r3, #16]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	440b      	add	r3, r1
 8005010:	1e59      	subs	r1, r3, #1
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	fbb1 f3f3 	udiv	r3, r1, r3
 800501a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800501c:	4b6b      	ldr	r3, [pc, #428]	@ (80051cc <USB_EPStartXfer+0x2e4>)
 800501e:	400b      	ands	r3, r1
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	0148      	lsls	r0, r1, #5
 8005024:	69f9      	ldr	r1, [r7, #28]
 8005026:	4401      	add	r1, r0
 8005028:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800502c:	4313      	orrs	r3, r2
 800502e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005046:	69b9      	ldr	r1, [r7, #24]
 8005048:	0148      	lsls	r0, r1, #5
 800504a:	69f9      	ldr	r1, [r7, #28]
 800504c:	4401      	add	r1, r0
 800504e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005052:	4313      	orrs	r3, r2
 8005054:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	791b      	ldrb	r3, [r3, #4]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d11f      	bne.n	800509e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005078:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800507c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005098:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800509c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d14b      	bne.n	800513c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	791b      	ldrb	r3, [r3, #4]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d128      	bne.n	800511a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d110      	bne.n	80050fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	0151      	lsls	r1, r2, #5
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	440a      	add	r2, r1
 80050ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	e00f      	b.n	800511a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	440a      	add	r2, r1
 8005110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005118:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005134:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e16a      	b.n	8005412 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005156:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800515a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	791b      	ldrb	r3, [r3, #4]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d015      	beq.n	8005190 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8152 	beq.w	8005412 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	2101      	movs	r1, #1
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	69f9      	ldr	r1, [r7, #28]
 8005186:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800518a:	4313      	orrs	r3, r2
 800518c:	634b      	str	r3, [r1, #52]	@ 0x34
 800518e:	e140      	b.n	8005412 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d117      	bne.n	80051d0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	e016      	b.n	80051f0 <USB_EPStartXfer+0x308>
 80051c2:	bf00      	nop
 80051c4:	e007ffff 	.word	0xe007ffff
 80051c8:	fff80000 	.word	0xfff80000
 80051cc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	68d9      	ldr	r1, [r3, #12]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	781a      	ldrb	r2, [r3, #0]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	b298      	uxth	r0, r3
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4603      	mov	r3, r0
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f9b9 	bl	800557c <USB_WritePacket>
 800520a:	e102      	b.n	8005412 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	0159      	lsls	r1, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	440b      	add	r3, r1
 8005222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005226:	4619      	mov	r1, r3
 8005228:	4b7c      	ldr	r3, [pc, #496]	@ (800541c <USB_EPStartXfer+0x534>)
 800522a:	4013      	ands	r3, r2
 800522c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	0159      	lsls	r1, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	440b      	add	r3, r1
 8005244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005248:	4619      	mov	r1, r3
 800524a:	4b75      	ldr	r3, [pc, #468]	@ (8005420 <USB_EPStartXfer+0x538>)
 800524c:	4013      	ands	r3, r2
 800524e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d12f      	bne.n	80052b6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005284:	69b9      	ldr	r1, [r7, #24]
 8005286:	0148      	lsls	r0, r1, #5
 8005288:	69f9      	ldr	r1, [r7, #28]
 800528a:	4401      	add	r1, r0
 800528c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005290:	4313      	orrs	r3, r2
 8005292:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052b2:	6113      	str	r3, [r2, #16]
 80052b4:	e05f      	b.n	8005376 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d123      	bne.n	8005306 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d4:	69b9      	ldr	r1, [r7, #24]
 80052d6:	0148      	lsls	r0, r1, #5
 80052d8:	69f9      	ldr	r1, [r7, #28]
 80052da:	4401      	add	r1, r0
 80052dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005302:	6113      	str	r3, [r2, #16]
 8005304:	e037      	b.n	8005376 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	4413      	add	r3, r2
 8005310:	1e5a      	subs	r2, r3, #1
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	8afa      	ldrh	r2, [r7, #22]
 8005322:	fb03 f202 	mul.w	r2, r3, r2
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	8afb      	ldrh	r3, [r7, #22]
 800533a:	04d9      	lsls	r1, r3, #19
 800533c:	4b39      	ldr	r3, [pc, #228]	@ (8005424 <USB_EPStartXfer+0x53c>)
 800533e:	400b      	ands	r3, r1
 8005340:	69b9      	ldr	r1, [r7, #24]
 8005342:	0148      	lsls	r0, r1, #5
 8005344:	69f9      	ldr	r1, [r7, #28]
 8005346:	4401      	add	r1, r0
 8005348:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800534c:	4313      	orrs	r3, r2
 800534e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535c:	691a      	ldr	r2, [r3, #16]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005366:	69b9      	ldr	r1, [r7, #24]
 8005368:	0148      	lsls	r0, r1, #5
 800536a:	69f9      	ldr	r1, [r7, #28]
 800536c:	4401      	add	r1, r0
 800536e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005372:	4313      	orrs	r3, r2
 8005374:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d10d      	bne.n	8005398 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	68d9      	ldr	r1, [r3, #12]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005394:	460a      	mov	r2, r1
 8005396:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	791b      	ldrb	r3, [r3, #4]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d128      	bne.n	80053f2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d110      	bne.n	80053d2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e00f      	b.n	80053f2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053f0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800540c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005410:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	fff80000 	.word	0xfff80000
 8005420:	e007ffff 	.word	0xe007ffff
 8005424:	1ff80000 	.word	0x1ff80000

08005428 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d14a      	bne.n	80054dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800545a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800545e:	f040 8086 	bne.w	800556e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	440a      	add	r2, r1
 800547c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005480:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005484:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3301      	adds	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d902      	bls.n	80054c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	75fb      	strb	r3, [r7, #23]
          break;
 80054be:	e056      	b.n	800556e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054d8:	d0e7      	beq.n	80054aa <USB_EPStopXfer+0x82>
 80054da:	e048      	b.n	800556e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f4:	d13b      	bne.n	800556e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	440a      	add	r2, r1
 8005510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005514:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005518:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	7812      	ldrb	r2, [r2, #0]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005538:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800553c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f242 7210 	movw	r2, #10000	@ 0x2710
 800554a:	4293      	cmp	r3, r2
 800554c:	d902      	bls.n	8005554 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
          break;
 8005552:	e00c      	b.n	800556e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800556c:	d0e7      	beq.n	800553e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	@ 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4611      	mov	r1, r2
 8005588:	461a      	mov	r2, r3
 800558a:	460b      	mov	r3, r1
 800558c:	71fb      	strb	r3, [r7, #7]
 800558e:	4613      	mov	r3, r2
 8005590:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800559a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d123      	bne.n	80055ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055a2:	88bb      	ldrh	r3, [r7, #4]
 80055a4:	3303      	adds	r3, #3
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	e018      	b.n	80055e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	031a      	lsls	r2, r3, #12
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055bc:	461a      	mov	r2, r3
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	3301      	adds	r3, #1
 80055c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3301      	adds	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	3301      	adds	r3, #1
 80055da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	3301      	adds	r3, #1
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d3e2      	bcc.n	80055b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3724      	adds	r7, #36	@ 0x24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b08b      	sub	sp, #44	@ 0x2c
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	4613      	mov	r3, r2
 8005604:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	089b      	lsrs	r3, r3, #2
 8005612:	b29b      	uxth	r3, r3
 8005614:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	e014      	b.n	800564e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	3301      	adds	r3, #1
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	3301      	adds	r3, #1
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	3301      	adds	r3, #1
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	3301      	adds	r3, #1
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	3301      	adds	r3, #1
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	6a3a      	ldr	r2, [r7, #32]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	429a      	cmp	r2, r3
 8005654:	d3e6      	bcc.n	8005624 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005656:	8bfb      	ldrh	r3, [r7, #30]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01e      	beq.n	800569a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005666:	461a      	mov	r2, r3
 8005668:	f107 0310 	add.w	r3, r7, #16
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
 800567c:	b2da      	uxtb	r2, r3
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	701a      	strb	r2, [r3, #0]
      i++;
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	3301      	adds	r3, #1
 8005686:	623b      	str	r3, [r7, #32]
      pDest++;
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	3301      	adds	r3, #1
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800568e:	8bfb      	ldrh	r3, [r7, #30]
 8005690:	3b01      	subs	r3, #1
 8005692:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005694:	8bfb      	ldrh	r3, [r7, #30]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1ea      	bne.n	8005670 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800569c:	4618      	mov	r0, r3
 800569e:	372c      	adds	r7, #44	@ 0x2c
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d12c      	bne.n	800571e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	db12      	blt.n	80056fc <USB_EPSetStall+0x54>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00f      	beq.n	80056fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	0151      	lsls	r1, r2, #5
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	440a      	add	r2, r1
 8005712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005716:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	e02b      	b.n	8005776 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	db12      	blt.n	8005756 <USB_EPSetStall+0xae>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00f      	beq.n	8005756 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005754:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005774:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d128      	bne.n	80057f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	791b      	ldrb	r3, [r3, #4]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d003      	beq.n	80057d0 <USB_EPClearStall+0x4c>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	791b      	ldrb	r3, [r3, #4]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d138      	bne.n	8005842 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	e027      	b.n	8005842 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800580c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005810:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d003      	beq.n	8005822 <USB_EPClearStall+0x9e>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	791b      	ldrb	r3, [r3, #4]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d10f      	bne.n	8005842 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005840:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800586e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005872:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005884:	68f9      	ldr	r1, [r7, #12]
 8005886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058ca:	f023 0302 	bic.w	r3, r3, #2
 80058ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80058f8:	f023 0303 	bic.w	r3, r3, #3
 80058fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800590c:	f043 0302 	orr.w	r3, r3, #2
 8005910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005938:	68fb      	ldr	r3, [r7, #12]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	0c1b      	lsrs	r3, r3, #16
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	b29b      	uxth	r3, r3
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059dc:	68bb      	ldr	r3, [r7, #8]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1a:	01db      	lsls	r3, r3, #7
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4013      	ands	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a38:	68bb      	ldr	r3, [r7, #8]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0301 	and.w	r3, r3, #1
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4b09      	ldr	r3, [pc, #36]	@ (8005aa8 <USB_ActivateSetup+0x44>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	fffff800 	.word	0xfffff800

08005aac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	333c      	adds	r3, #60	@ 0x3c
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4a26      	ldr	r2, [pc, #152]	@ (8005b64 <USB_EP0_OutStart+0xb8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d90a      	bls.n	8005ae6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005adc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ae0:	d101      	bne.n	8005ae6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e037      	b.n	8005b56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aec:	461a      	mov	r2, r3
 8005aee:	2300      	movs	r3, #0
 8005af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b14:	f043 0318 	orr.w	r3, r3, #24
 8005b18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b28:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005b2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b2e:	7afb      	ldrb	r3, [r7, #11]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d10f      	bne.n	8005b54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b4e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005b52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	4f54300a 	.word	0x4f54300a

08005b68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b80:	d901      	bls.n	8005b86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e01b      	b.n	8005bbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	daf2      	bge.n	8005b74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f043 0201 	orr.w	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005baa:	d901      	bls.n	8005bb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e006      	b.n	8005bbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d0f0      	beq.n	8005b9e <USB_CoreReset+0x36>

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bd8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005bdc:	f002 fdc2 	bl	8008764 <malloc>
 8005be0:	4603      	mov	r3, r0
 8005be2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	32b0      	adds	r2, #176	@ 0xb0
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0d4      	b.n	8005da8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005bfe:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005c02:	2100      	movs	r1, #0
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f002 fe6b 	bl	80088e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	32b0      	adds	r2, #176	@ 0xb0
 8005c14:	68f9      	ldr	r1, [r7, #12]
 8005c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	32b0      	adds	r2, #176	@ 0xb0
 8005c24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7c1b      	ldrb	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d138      	bne.n	8005ca8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c36:	4b5e      	ldr	r3, [pc, #376]	@ (8005db0 <USBD_CDC_Init+0x1e4>)
 8005c38:	7819      	ldrb	r1, [r3, #0]
 8005c3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c3e:	2202      	movs	r2, #2
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f002 fbec 	bl	800841e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c46:	4b5a      	ldr	r3, [pc, #360]	@ (8005db0 <USBD_CDC_Init+0x1e4>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	3324      	adds	r3, #36	@ 0x24
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c60:	4b54      	ldr	r3, [pc, #336]	@ (8005db4 <USBD_CDC_Init+0x1e8>)
 8005c62:	7819      	ldrb	r1, [r3, #0]
 8005c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c68:	2202      	movs	r2, #2
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f002 fbd7 	bl	800841e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c70:	4b50      	ldr	r3, [pc, #320]	@ (8005db4 <USBD_CDC_Init+0x1e8>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005c88:	2201      	movs	r2, #1
 8005c8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8005db8 <USBD_CDC_Init+0x1ec>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f003 020f 	and.w	r2, r3, #15
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3326      	adds	r3, #38	@ 0x26
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e035      	b.n	8005d14 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ca8:	4b41      	ldr	r3, [pc, #260]	@ (8005db0 <USBD_CDC_Init+0x1e4>)
 8005caa:	7819      	ldrb	r1, [r3, #0]
 8005cac:	2340      	movs	r3, #64	@ 0x40
 8005cae:	2202      	movs	r2, #2
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f002 fbb4 	bl	800841e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8005db0 <USBD_CDC_Init+0x1e4>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f003 020f 	and.w	r2, r3, #15
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	3324      	adds	r3, #36	@ 0x24
 8005ccc:	2201      	movs	r2, #1
 8005cce:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005cd0:	4b38      	ldr	r3, [pc, #224]	@ (8005db4 <USBD_CDC_Init+0x1e8>)
 8005cd2:	7819      	ldrb	r1, [r3, #0]
 8005cd4:	2340      	movs	r3, #64	@ 0x40
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f002 fba0 	bl	800841e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005cde:	4b35      	ldr	r3, [pc, #212]	@ (8005db4 <USBD_CDC_Init+0x1e8>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f003 020f 	and.w	r2, r3, #15
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8005db8 <USBD_CDC_Init+0x1ec>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f003 020f 	and.w	r2, r3, #15
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3326      	adds	r3, #38	@ 0x26
 8005d10:	2210      	movs	r2, #16
 8005d12:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d14:	4b28      	ldr	r3, [pc, #160]	@ (8005db8 <USBD_CDC_Init+0x1ec>)
 8005d16:	7819      	ldrb	r1, [r3, #0]
 8005d18:	2308      	movs	r3, #8
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f002 fb7e 	bl	800841e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005d22:	4b25      	ldr	r3, [pc, #148]	@ (8005db8 <USBD_CDC_Init+0x1ec>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f003 020f 	and.w	r2, r3, #15
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3324      	adds	r3, #36	@ 0x24
 8005d38:	2201      	movs	r2, #1
 8005d3a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	33b0      	adds	r3, #176	@ 0xb0
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8005d72:	2302      	movs	r3, #2
 8005d74:	e018      	b.n	8005da8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	7c1b      	ldrb	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <USBD_CDC_Init+0x1e8>)
 8005d80:	7819      	ldrb	r1, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f002 fc35 	bl	80085fc <USBD_LL_PrepareReceive>
 8005d92:	e008      	b.n	8005da6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d94:	4b07      	ldr	r3, [pc, #28]	@ (8005db4 <USBD_CDC_Init+0x1e8>)
 8005d96:	7819      	ldrb	r1, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d9e:	2340      	movs	r3, #64	@ 0x40
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f002 fc2b 	bl	80085fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000093 	.word	0x20000093
 8005db4:	20000094 	.word	0x20000094
 8005db8:	20000095 	.word	0x20000095

08005dbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8005eb4 <USBD_CDC_DeInit+0xf8>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f002 fb4b 	bl	800846a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005dd4:	4b37      	ldr	r3, [pc, #220]	@ (8005eb4 <USBD_CDC_DeInit+0xf8>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	3324      	adds	r3, #36	@ 0x24
 8005dea:	2200      	movs	r2, #0
 8005dec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005dee:	4b32      	ldr	r3, [pc, #200]	@ (8005eb8 <USBD_CDC_DeInit+0xfc>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f002 fb38 	bl	800846a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb8 <USBD_CDC_DeInit+0xfc>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	f003 020f 	and.w	r2, r3, #15
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e12:	2200      	movs	r2, #0
 8005e14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005e16:	4b29      	ldr	r3, [pc, #164]	@ (8005ebc <USBD_CDC_DeInit+0x100>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f002 fb24 	bl	800846a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005e22:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <USBD_CDC_DeInit+0x100>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 020f 	and.w	r2, r3, #15
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	3324      	adds	r3, #36	@ 0x24
 8005e38:	2200      	movs	r2, #0
 8005e3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005ebc <USBD_CDC_DeInit+0x100>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	f003 020f 	and.w	r2, r3, #15
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3326      	adds	r3, #38	@ 0x26
 8005e52:	2200      	movs	r2, #0
 8005e54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	32b0      	adds	r2, #176	@ 0xb0
 8005e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01f      	beq.n	8005ea8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	33b0      	adds	r3, #176	@ 0xb0
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	32b0      	adds	r2, #176	@ 0xb0
 8005e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f002 fc72 	bl	8008774 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	32b0      	adds	r2, #176	@ 0xb0
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000093 	.word	0x20000093
 8005eb8:	20000094 	.word	0x20000094
 8005ebc:	20000095 	.word	0x20000095

08005ec0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	32b0      	adds	r2, #176	@ 0xb0
 8005ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e0bf      	b.n	8006070 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d050      	beq.n	8005f9e <USBD_CDC_Setup+0xde>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	f040 80af 	bne.w	8006060 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	88db      	ldrh	r3, [r3, #6]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d03a      	beq.n	8005f80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	da1b      	bge.n	8005f4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	33b0      	adds	r3, #176	@ 0xb0
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005f2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	88d2      	ldrh	r2, [r2, #6]
 8005f30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	88db      	ldrh	r3, [r3, #6]
 8005f36:	2b07      	cmp	r3, #7
 8005f38:	bf28      	it	cs
 8005f3a:	2307      	movcs	r3, #7
 8005f3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	89fa      	ldrh	r2, [r7, #14]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fdbd 	bl	8007ac4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005f4a:	e090      	b.n	800606e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	785a      	ldrb	r2, [r3, #1]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	88db      	ldrh	r3, [r3, #6]
 8005f5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f5c:	d803      	bhi.n	8005f66 <USBD_CDC_Setup+0xa6>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	88db      	ldrh	r3, [r3, #6]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	e000      	b.n	8005f68 <USBD_CDC_Setup+0xa8>
 8005f66:	2240      	movs	r2, #64	@ 0x40
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005f6e:	6939      	ldr	r1, [r7, #16]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005f76:	461a      	mov	r2, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 fdcf 	bl	8007b1c <USBD_CtlPrepareRx>
      break;
 8005f7e:	e076      	b.n	800606e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	33b0      	adds	r3, #176	@ 0xb0
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	7850      	ldrb	r0, [r2, #1]
 8005f96:	2200      	movs	r2, #0
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	4798      	blx	r3
      break;
 8005f9c:	e067      	b.n	800606e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	2b0b      	cmp	r3, #11
 8005fa4:	d851      	bhi.n	800604a <USBD_CDC_Setup+0x18a>
 8005fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fac <USBD_CDC_Setup+0xec>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fdd 	.word	0x08005fdd
 8005fb0:	08006059 	.word	0x08006059
 8005fb4:	0800604b 	.word	0x0800604b
 8005fb8:	0800604b 	.word	0x0800604b
 8005fbc:	0800604b 	.word	0x0800604b
 8005fc0:	0800604b 	.word	0x0800604b
 8005fc4:	0800604b 	.word	0x0800604b
 8005fc8:	0800604b 	.word	0x0800604b
 8005fcc:	0800604b 	.word	0x0800604b
 8005fd0:	0800604b 	.word	0x0800604b
 8005fd4:	08006007 	.word	0x08006007
 8005fd8:	08006031 	.word	0x08006031
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d107      	bne.n	8005ff8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005fe8:	f107 030a 	add.w	r3, r7, #10
 8005fec:	2202      	movs	r2, #2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fd67 	bl	8007ac4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ff6:	e032      	b.n	800605e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fce5 	bl	80079ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	75fb      	strb	r3, [r7, #23]
          break;
 8006004:	e02b      	b.n	800605e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b03      	cmp	r3, #3
 8006010:	d107      	bne.n	8006022 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006012:	f107 030d 	add.w	r3, r7, #13
 8006016:	2201      	movs	r2, #1
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 fd52 	bl	8007ac4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006020:	e01d      	b.n	800605e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 fcd0 	bl	80079ca <USBD_CtlError>
            ret = USBD_FAIL;
 800602a:	2303      	movs	r3, #3
 800602c:	75fb      	strb	r3, [r7, #23]
          break;
 800602e:	e016      	b.n	800605e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b03      	cmp	r3, #3
 800603a:	d00f      	beq.n	800605c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fcc3 	bl	80079ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006044:	2303      	movs	r3, #3
 8006046:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006048:	e008      	b.n	800605c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 fcbc 	bl	80079ca <USBD_CtlError>
          ret = USBD_FAIL;
 8006052:	2303      	movs	r3, #3
 8006054:	75fb      	strb	r3, [r7, #23]
          break;
 8006056:	e002      	b.n	800605e <USBD_CDC_Setup+0x19e>
          break;
 8006058:	bf00      	nop
 800605a:	e008      	b.n	800606e <USBD_CDC_Setup+0x1ae>
          break;
 800605c:	bf00      	nop
      }
      break;
 800605e:	e006      	b.n	800606e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 fcb1 	bl	80079ca <USBD_CtlError>
      ret = USBD_FAIL;
 8006068:	2303      	movs	r3, #3
 800606a:	75fb      	strb	r3, [r7, #23]
      break;
 800606c:	bf00      	nop
  }

  return (uint8_t)ret;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800608a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	32b0      	adds	r2, #176	@ 0xb0
 8006096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800609e:	2303      	movs	r3, #3
 80060a0:	e065      	b.n	800616e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	32b0      	adds	r2, #176	@ 0xb0
 80060ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3318      	adds	r3, #24
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d02f      	beq.n	800612c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 020f 	and.w	r2, r3, #15
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	3318      	adds	r3, #24
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	f003 010f 	and.w	r1, r3, #15
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	460b      	mov	r3, r1
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	440b      	add	r3, r1
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4403      	add	r3, r0
 80060f4:	331c      	adds	r3, #28
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006102:	2b00      	cmp	r3, #0
 8006104:	d112      	bne.n	800612c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	3318      	adds	r3, #24
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800611e:	78f9      	ldrb	r1, [r7, #3]
 8006120:	2300      	movs	r3, #0
 8006122:	2200      	movs	r2, #0
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f002 fa48 	bl	80085ba <USBD_LL_Transmit>
 800612a:	e01f      	b.n	800616c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	33b0      	adds	r3, #176	@ 0xb0
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d010      	beq.n	800616c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	33b0      	adds	r3, #176	@ 0xb0
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	460b      	mov	r3, r1
 8006180:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	32b0      	adds	r2, #176	@ 0xb0
 800618c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006190:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	32b0      	adds	r2, #176	@ 0xb0
 800619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e01a      	b.n	80061de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f002 fa46 	bl	800863e <USBD_LL_GetRxDataSize>
 80061b2:	4602      	mov	r2, r0
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	33b0      	adds	r3, #176	@ 0xb0
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80061d8:	4611      	mov	r1, r2
 80061da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	32b0      	adds	r2, #176	@ 0xb0
 80061f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	e024      	b.n	8006252 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	33b0      	adds	r3, #176	@ 0xb0
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d019      	beq.n	8006250 <USBD_CDC_EP0_RxReady+0x6a>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006222:	2bff      	cmp	r3, #255	@ 0xff
 8006224:	d014      	beq.n	8006250 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	33b0      	adds	r3, #176	@ 0xb0
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800623e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006246:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	22ff      	movs	r2, #255	@ 0xff
 800624c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006264:	2182      	movs	r1, #130	@ 0x82
 8006266:	4818      	ldr	r0, [pc, #96]	@ (80062c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006268:	f000 fd4f 	bl	8006d0a <USBD_GetEpDesc>
 800626c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800626e:	2101      	movs	r1, #1
 8006270:	4815      	ldr	r0, [pc, #84]	@ (80062c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006272:	f000 fd4a 	bl	8006d0a <USBD_GetEpDesc>
 8006276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006278:	2181      	movs	r1, #129	@ 0x81
 800627a:	4813      	ldr	r0, [pc, #76]	@ (80062c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800627c:	f000 fd45 	bl	8006d0a <USBD_GetEpDesc>
 8006280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2210      	movs	r2, #16
 800628c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2200      	movs	r2, #0
 8006298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800629c:	711a      	strb	r2, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062b0:	711a      	strb	r2, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2243      	movs	r2, #67	@ 0x43
 80062ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062bc:	4b02      	ldr	r3, [pc, #8]	@ (80062c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000050 	.word	0x20000050

080062cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062d4:	2182      	movs	r1, #130	@ 0x82
 80062d6:	4818      	ldr	r0, [pc, #96]	@ (8006338 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062d8:	f000 fd17 	bl	8006d0a <USBD_GetEpDesc>
 80062dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062de:	2101      	movs	r1, #1
 80062e0:	4815      	ldr	r0, [pc, #84]	@ (8006338 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062e2:	f000 fd12 	bl	8006d0a <USBD_GetEpDesc>
 80062e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062e8:	2181      	movs	r1, #129	@ 0x81
 80062ea:	4813      	ldr	r0, [pc, #76]	@ (8006338 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062ec:	f000 fd0d 	bl	8006d0a <USBD_GetEpDesc>
 80062f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2210      	movs	r2, #16
 80062fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d006      	beq.n	8006312 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2200      	movs	r2, #0
 8006308:	711a      	strb	r2, [r3, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f042 0202 	orr.w	r2, r2, #2
 8006310:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d006      	beq.n	8006326 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	711a      	strb	r2, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f042 0202 	orr.w	r2, r2, #2
 8006324:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2243      	movs	r2, #67	@ 0x43
 800632a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800632c:	4b02      	ldr	r3, [pc, #8]	@ (8006338 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000050 	.word	0x20000050

0800633c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006344:	2182      	movs	r1, #130	@ 0x82
 8006346:	4818      	ldr	r0, [pc, #96]	@ (80063a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006348:	f000 fcdf 	bl	8006d0a <USBD_GetEpDesc>
 800634c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800634e:	2101      	movs	r1, #1
 8006350:	4815      	ldr	r0, [pc, #84]	@ (80063a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006352:	f000 fcda 	bl	8006d0a <USBD_GetEpDesc>
 8006356:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006358:	2181      	movs	r1, #129	@ 0x81
 800635a:	4813      	ldr	r0, [pc, #76]	@ (80063a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800635c:	f000 fcd5 	bl	8006d0a <USBD_GetEpDesc>
 8006360:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2210      	movs	r2, #16
 800636c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d006      	beq.n	8006382 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2200      	movs	r2, #0
 8006378:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800637c:	711a      	strb	r2, [r3, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d006      	beq.n	8006396 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006390:	711a      	strb	r2, [r3, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2243      	movs	r2, #67	@ 0x43
 800639a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800639c:	4b02      	ldr	r3, [pc, #8]	@ (80063a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000050 	.word	0x20000050

080063ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	220a      	movs	r2, #10
 80063b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80063ba:	4b03      	ldr	r3, [pc, #12]	@ (80063c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	2000000c 	.word	0x2000000c

080063cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e009      	b.n	80063f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	33b0      	adds	r3, #176	@ 0xb0
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	32b0      	adds	r2, #176	@ 0xb0
 8006416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006422:	2303      	movs	r3, #3
 8006424:	e008      	b.n	8006438 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	32b0      	adds	r2, #176	@ 0xb0
 8006458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006464:	2303      	movs	r3, #3
 8006466:	e004      	b.n	8006472 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	32b0      	adds	r2, #176	@ 0xb0
 8006492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006496:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e025      	b.n	80064f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d11f      	bne.n	80064f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80064b8:	4b10      	ldr	r3, [pc, #64]	@ (80064fc <USBD_CDC_TransmitPacket+0x7c>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f003 020f 	and.w	r2, r3, #15
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4613      	mov	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4403      	add	r3, r0
 80064d2:	3318      	adds	r3, #24
 80064d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80064d6:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <USBD_CDC_TransmitPacket+0x7c>)
 80064d8:	7819      	ldrb	r1, [r3, #0]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f002 f867 	bl	80085ba <USBD_LL_Transmit>

    ret = USBD_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000093 	.word	0x20000093

08006500 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32b0      	adds	r2, #176	@ 0xb0
 8006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006516:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	32b0      	adds	r2, #176	@ 0xb0
 8006522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800652a:	2303      	movs	r3, #3
 800652c:	e018      	b.n	8006560 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	7c1b      	ldrb	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006536:	4b0c      	ldr	r3, [pc, #48]	@ (8006568 <USBD_CDC_ReceivePacket+0x68>)
 8006538:	7819      	ldrb	r1, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006540:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f002 f859 	bl	80085fc <USBD_LL_PrepareReceive>
 800654a:	e008      	b.n	800655e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <USBD_CDC_ReceivePacket+0x68>)
 800654e:	7819      	ldrb	r1, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006556:	2340      	movs	r3, #64	@ 0x40
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f002 f84f 	bl	80085fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000094 	.word	0x20000094

0800656c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006580:	2303      	movs	r3, #3
 8006582:	e01f      	b.n	80065c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	79fa      	ldrb	r2, [r7, #7]
 80065b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f001 fec9 	bl	8008350 <USBD_LL_Init>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e025      	b.n	8006630 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	32ae      	adds	r2, #174	@ 0xae
 80065f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00f      	beq.n	8006620 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	32ae      	adds	r2, #174	@ 0xae
 800660a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	f107 020e 	add.w	r2, r7, #14
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
 8006618:	4602      	mov	r2, r0
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 fed1 	bl	80083e8 <USBD_LL_Start>
 8006646:	4603      	mov	r3, r0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006658:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	78fa      	ldrb	r2, [r7, #3]
 800668a:	4611      	mov	r1, r2
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
 8006690:	4603      	mov	r3, r0
 8006692:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	4611      	mov	r1, r2
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 f936 	bl	8007956 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	2b02      	cmp	r3, #2
 800670c:	d01a      	beq.n	8006744 <USBD_LL_SetupStage+0x72>
 800670e:	2b02      	cmp	r3, #2
 8006710:	d822      	bhi.n	8006758 <USBD_LL_SetupStage+0x86>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <USBD_LL_SetupStage+0x4a>
 8006716:	2b01      	cmp	r3, #1
 8006718:	d00a      	beq.n	8006730 <USBD_LL_SetupStage+0x5e>
 800671a:	e01d      	b.n	8006758 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fb63 	bl	8006df0 <USBD_StdDevReq>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
      break;
 800672e:	e020      	b.n	8006772 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fbcb 	bl	8006ed4 <USBD_StdItfReq>
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]
      break;
 8006742:	e016      	b.n	8006772 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fc2d 	bl	8006fac <USBD_StdEPReq>
 8006752:	4603      	mov	r3, r0
 8006754:	73fb      	strb	r3, [r7, #15]
      break;
 8006756:	e00c      	b.n	8006772 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800675e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006762:	b2db      	uxtb	r3, r3
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fe9e 	bl	80084a8 <USBD_LL_StallEP>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
      break;
 8006770:	bf00      	nop
  }

  return ret;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	460b      	mov	r3, r1
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d16e      	bne.n	8006872 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800679a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	f040 8098 	bne.w	80068d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d913      	bls.n	80067dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	1ad2      	subs	r2, r2, r3
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	4293      	cmp	r3, r2
 80067cc:	bf28      	it	cs
 80067ce:	4613      	movcs	r3, r2
 80067d0:	461a      	mov	r2, r3
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f001 f9be 	bl	8007b56 <USBD_CtlContinueRx>
 80067da:	e07d      	b.n	80068d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d014      	beq.n	8006814 <USBD_LL_DataOutStage+0x98>
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d81d      	bhi.n	800682a <USBD_LL_DataOutStage+0xae>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <USBD_LL_DataOutStage+0x7c>
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d003      	beq.n	80067fe <USBD_LL_DataOutStage+0x82>
 80067f6:	e018      	b.n	800682a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	75bb      	strb	r3, [r7, #22]
            break;
 80067fc:	e018      	b.n	8006830 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4619      	mov	r1, r3
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 fa64 	bl	8006cd6 <USBD_CoreFindIF>
 800680e:	4603      	mov	r3, r0
 8006810:	75bb      	strb	r3, [r7, #22]
            break;
 8006812:	e00d      	b.n	8006830 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800681a:	b2db      	uxtb	r3, r3
 800681c:	4619      	mov	r1, r3
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fa66 	bl	8006cf0 <USBD_CoreFindEP>
 8006824:	4603      	mov	r3, r0
 8006826:	75bb      	strb	r3, [r7, #22]
            break;
 8006828:	e002      	b.n	8006830 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	75bb      	strb	r3, [r7, #22]
            break;
 800682e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006830:	7dbb      	ldrb	r3, [r7, #22]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d119      	bne.n	800686a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b03      	cmp	r3, #3
 8006840:	d113      	bne.n	800686a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006842:	7dba      	ldrb	r2, [r7, #22]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	32ae      	adds	r2, #174	@ 0xae
 8006848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00b      	beq.n	800686a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006852:	7dba      	ldrb	r2, [r7, #22]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800685a:	7dba      	ldrb	r2, [r7, #22]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	32ae      	adds	r2, #174	@ 0xae
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f001 f984 	bl	8007b78 <USBD_CtlSendStatus>
 8006870:	e032      	b.n	80068d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006872:	7afb      	ldrb	r3, [r7, #11]
 8006874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006878:	b2db      	uxtb	r3, r3
 800687a:	4619      	mov	r1, r3
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fa37 	bl	8006cf0 <USBD_CoreFindEP>
 8006882:	4603      	mov	r3, r0
 8006884:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006886:	7dbb      	ldrb	r3, [r7, #22]
 8006888:	2bff      	cmp	r3, #255	@ 0xff
 800688a:	d025      	beq.n	80068d8 <USBD_LL_DataOutStage+0x15c>
 800688c:	7dbb      	ldrb	r3, [r7, #22]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d122      	bne.n	80068d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b03      	cmp	r3, #3
 800689c:	d117      	bne.n	80068ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800689e:	7dba      	ldrb	r2, [r7, #22]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	32ae      	adds	r2, #174	@ 0xae
 80068a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00f      	beq.n	80068ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80068ae:	7dba      	ldrb	r2, [r7, #22]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80068b6:	7dba      	ldrb	r2, [r7, #22]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	32ae      	adds	r2, #174	@ 0xae
 80068bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	7afa      	ldrb	r2, [r7, #11]
 80068c4:	4611      	mov	r1, r2
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	4798      	blx	r3
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
 80068d6:	e000      	b.n	80068da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b086      	sub	sp, #24
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	460b      	mov	r3, r1
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d16f      	bne.n	80069d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3314      	adds	r3, #20
 80068fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006902:	2b02      	cmp	r3, #2
 8006904:	d15a      	bne.n	80069bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	429a      	cmp	r2, r3
 8006910:	d914      	bls.n	800693c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	461a      	mov	r2, r3
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f001 f8e6 	bl	8007afa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800692e:	2300      	movs	r3, #0
 8006930:	2200      	movs	r2, #0
 8006932:	2100      	movs	r1, #0
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f001 fe61 	bl	80085fc <USBD_LL_PrepareReceive>
 800693a:	e03f      	b.n	80069bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	429a      	cmp	r2, r3
 8006946:	d11c      	bne.n	8006982 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006950:	429a      	cmp	r2, r3
 8006952:	d316      	bcc.n	8006982 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800695e:	429a      	cmp	r2, r3
 8006960:	d20f      	bcs.n	8006982 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006962:	2200      	movs	r2, #0
 8006964:	2100      	movs	r1, #0
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f001 f8c7 	bl	8007afa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006974:	2300      	movs	r3, #0
 8006976:	2200      	movs	r2, #0
 8006978:	2100      	movs	r1, #0
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f001 fe3e 	bl	80085fc <USBD_LL_PrepareReceive>
 8006980:	e01c      	b.n	80069bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b03      	cmp	r3, #3
 800698c:	d10f      	bne.n	80069ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ae:	2180      	movs	r1, #128	@ 0x80
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f001 fd79 	bl	80084a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f001 f8f1 	bl	8007b9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d03a      	beq.n	8006a3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff fe42 	bl	8006650 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80069d4:	e032      	b.n	8006a3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f985 	bl	8006cf0 <USBD_CoreFindEP>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2bff      	cmp	r3, #255	@ 0xff
 80069ee:	d025      	beq.n	8006a3c <USBD_LL_DataInStage+0x15a>
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d122      	bne.n	8006a3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d11c      	bne.n	8006a3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a02:	7dfa      	ldrb	r2, [r7, #23]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	32ae      	adds	r2, #174	@ 0xae
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d014      	beq.n	8006a3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a12:	7dfa      	ldrb	r2, [r7, #23]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a1a:	7dfa      	ldrb	r2, [r7, #23]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	32ae      	adds	r2, #174	@ 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	7afa      	ldrb	r2, [r7, #11]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	4798      	blx	r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a32:	7dbb      	ldrb	r3, [r7, #22]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a38:	7dbb      	ldrb	r3, [r7, #22]
 8006a3a:	e000      	b.n	8006a3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d014      	beq.n	8006aac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6852      	ldr	r2, [r2, #4]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aac:	2340      	movs	r3, #64	@ 0x40
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fcb3 	bl	800841e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2240      	movs	r2, #64	@ 0x40
 8006ac4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ac8:	2340      	movs	r3, #64	@ 0x40
 8006aca:	2200      	movs	r2, #0
 8006acc:	2180      	movs	r1, #128	@ 0x80
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fca5 	bl	800841e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2240      	movs	r2, #64	@ 0x40
 8006ade:	621a      	str	r2, [r3, #32]

  return ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d006      	beq.n	8006b2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2204      	movs	r2, #4
 8006b30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d106      	bne.n	8006b64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d110      	bne.n	8006ba8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	32ae      	adds	r2, #174	@ 0xae
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e01c      	b.n	8006c0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d115      	bne.n	8006c0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	32ae      	adds	r2, #174	@ 0xae
 8006bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	32ae      	adds	r2, #174	@ 0xae
 8006bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	78fa      	ldrb	r2, [r7, #3]
 8006c06:	4611      	mov	r1, r2
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	32ae      	adds	r2, #174	@ 0xae
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e01c      	b.n	8006c72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d115      	bne.n	8006c70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	32ae      	adds	r2, #174	@ 0xae
 8006c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	32ae      	adds	r2, #174	@ 0xae
 8006c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00e      	beq.n	8006ccc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6852      	ldr	r2, [r2, #4]
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ce2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	885b      	ldrh	r3, [r3, #2]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d91f      	bls.n	8006d70 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d36:	e013      	b.n	8006d60 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d38:	f107 030a 	add.w	r3, r7, #10
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6978      	ldr	r0, [r7, #20]
 8006d40:	f000 f81b 	bl	8006d7a <USBD_GetNextDesc>
 8006d44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	d108      	bne.n	8006d60 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	789b      	ldrb	r3, [r3, #2]
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d008      	beq.n	8006d6e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	885b      	ldrh	r3, [r3, #2]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	897b      	ldrh	r3, [r7, #10]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d8e5      	bhi.n	8006d38 <USBD_GetEpDesc+0x2e>
 8006d6c:	e000      	b.n	8006d70 <USBD_GetEpDesc+0x66>
          break;
 8006d6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d70:	693b      	ldr	r3, [r7, #16]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	4413      	add	r3, r2
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4413      	add	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006da4:	68fb      	ldr	r3, [r7, #12]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b087      	sub	sp, #28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dd0:	8a3b      	ldrh	r3, [r7, #16]
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	b21a      	sxth	r2, r3
 8006dd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	b21b      	sxth	r3, r3
 8006dde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006de0:	89fb      	ldrh	r3, [r7, #14]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
	...

08006df0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e06:	2b40      	cmp	r3, #64	@ 0x40
 8006e08:	d005      	beq.n	8006e16 <USBD_StdDevReq+0x26>
 8006e0a:	2b40      	cmp	r3, #64	@ 0x40
 8006e0c:	d857      	bhi.n	8006ebe <USBD_StdDevReq+0xce>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00f      	beq.n	8006e32 <USBD_StdDevReq+0x42>
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d153      	bne.n	8006ebe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	32ae      	adds	r2, #174	@ 0xae
 8006e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e30:	e04a      	b.n	8006ec8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b09      	cmp	r3, #9
 8006e38:	d83b      	bhi.n	8006eb2 <USBD_StdDevReq+0xc2>
 8006e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <USBD_StdDevReq+0x50>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e95 	.word	0x08006e95
 8006e44:	08006ea9 	.word	0x08006ea9
 8006e48:	08006eb3 	.word	0x08006eb3
 8006e4c:	08006e9f 	.word	0x08006e9f
 8006e50:	08006eb3 	.word	0x08006eb3
 8006e54:	08006e73 	.word	0x08006e73
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006eb3 	.word	0x08006eb3
 8006e60:	08006e8b 	.word	0x08006e8b
 8006e64:	08006e7d 	.word	0x08006e7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa3c 	bl	80072e8 <USBD_GetDescriptor>
          break;
 8006e70:	e024      	b.n	8006ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fbcb 	bl	8007610 <USBD_SetAddress>
          break;
 8006e7a:	e01f      	b.n	8006ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fc0a 	bl	8007698 <USBD_SetConfig>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]
          break;
 8006e88:	e018      	b.n	8006ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fcad 	bl	80077ec <USBD_GetConfig>
          break;
 8006e92:	e013      	b.n	8006ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fcde 	bl	8007858 <USBD_GetStatus>
          break;
 8006e9c:	e00e      	b.n	8006ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fd0d 	bl	80078c0 <USBD_SetFeature>
          break;
 8006ea6:	e009      	b.n	8006ebc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fd31 	bl	8007912 <USBD_ClrFeature>
          break;
 8006eb0:	e004      	b.n	8006ebc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fd88 	bl	80079ca <USBD_CtlError>
          break;
 8006eba:	bf00      	nop
      }
      break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fd82 	bl	80079ca <USBD_CtlError>
      break;
 8006ec6:	bf00      	nop
  }

  return ret;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop

08006ed4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006eea:	2b40      	cmp	r3, #64	@ 0x40
 8006eec:	d005      	beq.n	8006efa <USBD_StdItfReq+0x26>
 8006eee:	2b40      	cmp	r3, #64	@ 0x40
 8006ef0:	d852      	bhi.n	8006f98 <USBD_StdItfReq+0xc4>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <USBD_StdItfReq+0x26>
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d14e      	bne.n	8006f98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d840      	bhi.n	8006f8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	889b      	ldrh	r3, [r3, #4]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d836      	bhi.n	8006f80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	889b      	ldrh	r3, [r3, #4]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fedb 	bl	8006cd6 <USBD_CoreFindIF>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2bff      	cmp	r3, #255	@ 0xff
 8006f28:	d01d      	beq.n	8006f66 <USBD_StdItfReq+0x92>
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11a      	bne.n	8006f66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f30:	7bba      	ldrb	r2, [r7, #14]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	32ae      	adds	r2, #174	@ 0xae
 8006f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00f      	beq.n	8006f60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f40:	7bba      	ldrb	r2, [r7, #14]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f48:	7bba      	ldrb	r2, [r7, #14]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32ae      	adds	r2, #174	@ 0xae
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f5e:	e004      	b.n	8006f6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f60:	2303      	movs	r3, #3
 8006f62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f64:	e001      	b.n	8006f6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f66:	2303      	movs	r3, #3
 8006f68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	88db      	ldrh	r3, [r3, #6]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d110      	bne.n	8006f94 <USBD_StdItfReq+0xc0>
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10d      	bne.n	8006f94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fdfd 	bl	8007b78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f7e:	e009      	b.n	8006f94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fd21 	bl	80079ca <USBD_CtlError>
          break;
 8006f88:	e004      	b.n	8006f94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fd1c 	bl	80079ca <USBD_CtlError>
          break;
 8006f92:	e000      	b.n	8006f96 <USBD_StdItfReq+0xc2>
          break;
 8006f94:	bf00      	nop
      }
      break;
 8006f96:	e004      	b.n	8006fa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fd15 	bl	80079ca <USBD_CtlError>
      break;
 8006fa0:	bf00      	nop
  }

  return ret;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	889b      	ldrh	r3, [r3, #4]
 8006fbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d007      	beq.n	8006fdc <USBD_StdEPReq+0x30>
 8006fcc:	2b40      	cmp	r3, #64	@ 0x40
 8006fce:	f200 817f 	bhi.w	80072d0 <USBD_StdEPReq+0x324>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02a      	beq.n	800702c <USBD_StdEPReq+0x80>
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	f040 817a 	bne.w	80072d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff fe85 	bl	8006cf0 <USBD_CoreFindEP>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fea:	7b7b      	ldrb	r3, [r7, #13]
 8006fec:	2bff      	cmp	r3, #255	@ 0xff
 8006fee:	f000 8174 	beq.w	80072da <USBD_StdEPReq+0x32e>
 8006ff2:	7b7b      	ldrb	r3, [r7, #13]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 8170 	bne.w	80072da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006ffa:	7b7a      	ldrb	r2, [r7, #13]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007002:	7b7a      	ldrb	r2, [r7, #13]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	32ae      	adds	r2, #174	@ 0xae
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8163 	beq.w	80072da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007014:	7b7a      	ldrb	r2, [r7, #13]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32ae      	adds	r2, #174	@ 0xae
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
 8007026:	4603      	mov	r3, r0
 8007028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800702a:	e156      	b.n	80072da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	2b03      	cmp	r3, #3
 8007032:	d008      	beq.n	8007046 <USBD_StdEPReq+0x9a>
 8007034:	2b03      	cmp	r3, #3
 8007036:	f300 8145 	bgt.w	80072c4 <USBD_StdEPReq+0x318>
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 809b 	beq.w	8007176 <USBD_StdEPReq+0x1ca>
 8007040:	2b01      	cmp	r3, #1
 8007042:	d03c      	beq.n	80070be <USBD_StdEPReq+0x112>
 8007044:	e13e      	b.n	80072c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d002      	beq.n	8007058 <USBD_StdEPReq+0xac>
 8007052:	2b03      	cmp	r3, #3
 8007054:	d016      	beq.n	8007084 <USBD_StdEPReq+0xd8>
 8007056:	e02c      	b.n	80070b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00d      	beq.n	800707a <USBD_StdEPReq+0xce>
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b80      	cmp	r3, #128	@ 0x80
 8007062:	d00a      	beq.n	800707a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fa1d 	bl	80084a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800706e:	2180      	movs	r1, #128	@ 0x80
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fa19 	bl	80084a8 <USBD_LL_StallEP>
 8007076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007078:	e020      	b.n	80070bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fca4 	bl	80079ca <USBD_CtlError>
              break;
 8007082:	e01b      	b.n	80070bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	885b      	ldrh	r3, [r3, #2]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10e      	bne.n	80070aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <USBD_StdEPReq+0xfe>
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b80      	cmp	r3, #128	@ 0x80
 8007096:	d008      	beq.n	80070aa <USBD_StdEPReq+0xfe>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	88db      	ldrh	r3, [r3, #6]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f9ff 	bl	80084a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fd64 	bl	8007b78 <USBD_CtlSendStatus>

              break;
 80070b0:	e004      	b.n	80070bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc88 	bl	80079ca <USBD_CtlError>
              break;
 80070ba:	bf00      	nop
          }
          break;
 80070bc:	e107      	b.n	80072ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d002      	beq.n	80070d0 <USBD_StdEPReq+0x124>
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d016      	beq.n	80070fc <USBD_StdEPReq+0x150>
 80070ce:	e04b      	b.n	8007168 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00d      	beq.n	80070f2 <USBD_StdEPReq+0x146>
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b80      	cmp	r3, #128	@ 0x80
 80070da:	d00a      	beq.n	80070f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 f9e1 	bl	80084a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070e6:	2180      	movs	r1, #128	@ 0x80
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 f9dd 	bl	80084a8 <USBD_LL_StallEP>
 80070ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070f0:	e040      	b.n	8007174 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fc68 	bl	80079ca <USBD_CtlError>
              break;
 80070fa:	e03b      	b.n	8007174 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	885b      	ldrh	r3, [r3, #2]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d136      	bne.n	8007172 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 f9e7 	bl	80084e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fd2d 	bl	8007b78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff fde4 	bl	8006cf0 <USBD_CoreFindEP>
 8007128:	4603      	mov	r3, r0
 800712a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800712c:	7b7b      	ldrb	r3, [r7, #13]
 800712e:	2bff      	cmp	r3, #255	@ 0xff
 8007130:	d01f      	beq.n	8007172 <USBD_StdEPReq+0x1c6>
 8007132:	7b7b      	ldrb	r3, [r7, #13]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d11c      	bne.n	8007172 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007138:	7b7a      	ldrb	r2, [r7, #13]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007140:	7b7a      	ldrb	r2, [r7, #13]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	32ae      	adds	r2, #174	@ 0xae
 8007146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d010      	beq.n	8007172 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007150:	7b7a      	ldrb	r2, [r7, #13]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	32ae      	adds	r2, #174	@ 0xae
 8007156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007166:	e004      	b.n	8007172 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fc2d 	bl	80079ca <USBD_CtlError>
              break;
 8007170:	e000      	b.n	8007174 <USBD_StdEPReq+0x1c8>
              break;
 8007172:	bf00      	nop
          }
          break;
 8007174:	e0ab      	b.n	80072ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d002      	beq.n	8007188 <USBD_StdEPReq+0x1dc>
 8007182:	2b03      	cmp	r3, #3
 8007184:	d032      	beq.n	80071ec <USBD_StdEPReq+0x240>
 8007186:	e097      	b.n	80072b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <USBD_StdEPReq+0x1f2>
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b80      	cmp	r3, #128	@ 0x80
 8007192:	d004      	beq.n	800719e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fc17 	bl	80079ca <USBD_CtlError>
                break;
 800719c:	e091      	b.n	80072c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800719e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	da0b      	bge.n	80071be <USBD_StdEPReq+0x212>
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	3310      	adds	r3, #16
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	3304      	adds	r3, #4
 80071bc:	e00b      	b.n	80071d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4413      	add	r3, r2
 80071d4:	3304      	adds	r3, #4
 80071d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2202      	movs	r2, #2
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fc6d 	bl	8007ac4 <USBD_CtlSendData>
              break;
 80071ea:	e06a      	b.n	80072c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da11      	bge.n	8007218 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	3324      	adds	r3, #36	@ 0x24
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d117      	bne.n	800723e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fbda 	bl	80079ca <USBD_CtlError>
                  break;
 8007216:	e054      	b.n	80072c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	f003 020f 	and.w	r2, r3, #15
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	440b      	add	r3, r1
 800722a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fbc7 	bl	80079ca <USBD_CtlError>
                  break;
 800723c:	e041      	b.n	80072c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800723e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007242:	2b00      	cmp	r3, #0
 8007244:	da0b      	bge.n	800725e <USBD_StdEPReq+0x2b2>
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800724c:	4613      	mov	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	3310      	adds	r3, #16
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4413      	add	r3, r2
 800725a:	3304      	adds	r3, #4
 800725c:	e00b      	b.n	8007276 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	4413      	add	r3, r2
 8007274:	3304      	adds	r3, #4
 8007276:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <USBD_StdEPReq+0x2d8>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b80      	cmp	r3, #128	@ 0x80
 8007282:	d103      	bne.n	800728c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	e00e      	b.n	80072aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f947 	bl	8008524 <USBD_LL_IsStallEP>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	e002      	b.n	80072aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2202      	movs	r2, #2
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc07 	bl	8007ac4 <USBD_CtlSendData>
              break;
 80072b6:	e004      	b.n	80072c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fb85 	bl	80079ca <USBD_CtlError>
              break;
 80072c0:	bf00      	nop
          }
          break;
 80072c2:	e004      	b.n	80072ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fb7f 	bl	80079ca <USBD_CtlError>
          break;
 80072cc:	bf00      	nop
      }
      break;
 80072ce:	e005      	b.n	80072dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fb79 	bl	80079ca <USBD_CtlError>
      break;
 80072d8:	e000      	b.n	80072dc <USBD_StdEPReq+0x330>
      break;
 80072da:	bf00      	nop
  }

  return ret;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	885b      	ldrh	r3, [r3, #2]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	2b0e      	cmp	r3, #14
 800730a:	f200 8152 	bhi.w	80075b2 <USBD_GetDescriptor+0x2ca>
 800730e:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <USBD_GetDescriptor+0x2c>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007385 	.word	0x08007385
 8007318:	0800739d 	.word	0x0800739d
 800731c:	080073dd 	.word	0x080073dd
 8007320:	080075b3 	.word	0x080075b3
 8007324:	080075b3 	.word	0x080075b3
 8007328:	08007553 	.word	0x08007553
 800732c:	0800757f 	.word	0x0800757f
 8007330:	080075b3 	.word	0x080075b3
 8007334:	080075b3 	.word	0x080075b3
 8007338:	080075b3 	.word	0x080075b3
 800733c:	080075b3 	.word	0x080075b3
 8007340:	080075b3 	.word	0x080075b3
 8007344:	080075b3 	.word	0x080075b3
 8007348:	080075b3 	.word	0x080075b3
 800734c:	08007351 	.word	0x08007351
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7c12      	ldrb	r2, [r2, #16]
 8007368:	f107 0108 	add.w	r1, r7, #8
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007372:	e126      	b.n	80075c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb27 	bl	80079ca <USBD_CtlError>
        err++;
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	3301      	adds	r3, #1
 8007380:	72fb      	strb	r3, [r7, #11]
      break;
 8007382:	e11e      	b.n	80075c2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	7c12      	ldrb	r2, [r2, #16]
 8007390:	f107 0108 	add.w	r1, r7, #8
 8007394:	4610      	mov	r0, r2
 8007396:	4798      	blx	r3
 8007398:	60f8      	str	r0, [r7, #12]
      break;
 800739a:	e112      	b.n	80075c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	7c1b      	ldrb	r3, [r3, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ac:	f107 0208 	add.w	r2, r7, #8
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	2202      	movs	r2, #2
 80073bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073be:	e100      	b.n	80075c2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c8:	f107 0208 	add.w	r2, r7, #8
 80073cc:	4610      	mov	r0, r2
 80073ce:	4798      	blx	r3
 80073d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	2202      	movs	r2, #2
 80073d8:	701a      	strb	r2, [r3, #0]
      break;
 80073da:	e0f2      	b.n	80075c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	885b      	ldrh	r3, [r3, #2]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	f200 80ac 	bhi.w	8007540 <USBD_GetDescriptor+0x258>
 80073e8:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <USBD_GetDescriptor+0x108>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007409 	.word	0x08007409
 80073f4:	0800743d 	.word	0x0800743d
 80073f8:	08007471 	.word	0x08007471
 80073fc:	080074a5 	.word	0x080074a5
 8007400:	080074d9 	.word	0x080074d9
 8007404:	0800750d 	.word	0x0800750d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00b      	beq.n	800742c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	7c12      	ldrb	r2, [r2, #16]
 8007420:	f107 0108 	add.w	r1, r7, #8
 8007424:	4610      	mov	r0, r2
 8007426:	4798      	blx	r3
 8007428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800742a:	e091      	b.n	8007550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 facb 	bl	80079ca <USBD_CtlError>
            err++;
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	3301      	adds	r3, #1
 8007438:	72fb      	strb	r3, [r7, #11]
          break;
 800743a:	e089      	b.n	8007550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	7c12      	ldrb	r2, [r2, #16]
 8007454:	f107 0108 	add.w	r1, r7, #8
 8007458:	4610      	mov	r0, r2
 800745a:	4798      	blx	r3
 800745c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800745e:	e077      	b.n	8007550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fab1 	bl	80079ca <USBD_CtlError>
            err++;
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	3301      	adds	r3, #1
 800746c:	72fb      	strb	r3, [r7, #11]
          break;
 800746e:	e06f      	b.n	8007550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	7c12      	ldrb	r2, [r2, #16]
 8007488:	f107 0108 	add.w	r1, r7, #8
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3
 8007490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007492:	e05d      	b.n	8007550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa97 	bl	80079ca <USBD_CtlError>
            err++;
 800749c:	7afb      	ldrb	r3, [r7, #11]
 800749e:	3301      	adds	r3, #1
 80074a0:	72fb      	strb	r3, [r7, #11]
          break;
 80074a2:	e055      	b.n	8007550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	7c12      	ldrb	r2, [r2, #16]
 80074bc:	f107 0108 	add.w	r1, r7, #8
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074c6:	e043      	b.n	8007550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa7d 	bl	80079ca <USBD_CtlError>
            err++;
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	3301      	adds	r3, #1
 80074d4:	72fb      	strb	r3, [r7, #11]
          break;
 80074d6:	e03b      	b.n	8007550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	7c12      	ldrb	r2, [r2, #16]
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fa:	e029      	b.n	8007550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa63 	bl	80079ca <USBD_CtlError>
            err++;
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	3301      	adds	r3, #1
 8007508:	72fb      	strb	r3, [r7, #11]
          break;
 800750a:	e021      	b.n	8007550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00b      	beq.n	8007530 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	7c12      	ldrb	r2, [r2, #16]
 8007524:	f107 0108 	add.w	r1, r7, #8
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
 800752c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800752e:	e00f      	b.n	8007550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa49 	bl	80079ca <USBD_CtlError>
            err++;
 8007538:	7afb      	ldrb	r3, [r7, #11]
 800753a:	3301      	adds	r3, #1
 800753c:	72fb      	strb	r3, [r7, #11]
          break;
 800753e:	e007      	b.n	8007550 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fa41 	bl	80079ca <USBD_CtlError>
          err++;
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	3301      	adds	r3, #1
 800754c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800754e:	bf00      	nop
      }
      break;
 8007550:	e037      	b.n	80075c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	7c1b      	ldrb	r3, [r3, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007562:	f107 0208 	add.w	r2, r7, #8
 8007566:	4610      	mov	r0, r2
 8007568:	4798      	blx	r3
 800756a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800756c:	e029      	b.n	80075c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fa2a 	bl	80079ca <USBD_CtlError>
        err++;
 8007576:	7afb      	ldrb	r3, [r7, #11]
 8007578:	3301      	adds	r3, #1
 800757a:	72fb      	strb	r3, [r7, #11]
      break;
 800757c:	e021      	b.n	80075c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	7c1b      	ldrb	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10d      	bne.n	80075a2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758e:	f107 0208 	add.w	r2, r7, #8
 8007592:	4610      	mov	r0, r2
 8007594:	4798      	blx	r3
 8007596:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	2207      	movs	r2, #7
 800759e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075a0:	e00f      	b.n	80075c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fa10 	bl	80079ca <USBD_CtlError>
        err++;
 80075aa:	7afb      	ldrb	r3, [r7, #11]
 80075ac:	3301      	adds	r3, #1
 80075ae:	72fb      	strb	r3, [r7, #11]
      break;
 80075b0:	e007      	b.n	80075c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa08 	bl	80079ca <USBD_CtlError>
      err++;
 80075ba:	7afb      	ldrb	r3, [r7, #11]
 80075bc:	3301      	adds	r3, #1
 80075be:	72fb      	strb	r3, [r7, #11]
      break;
 80075c0:	bf00      	nop
  }

  if (err != 0U)
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11e      	bne.n	8007606 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	88db      	ldrh	r3, [r3, #6]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d016      	beq.n	80075fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80075d0:	893b      	ldrh	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00e      	beq.n	80075f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	88da      	ldrh	r2, [r3, #6]
 80075da:	893b      	ldrh	r3, [r7, #8]
 80075dc:	4293      	cmp	r3, r2
 80075de:	bf28      	it	cs
 80075e0:	4613      	movcs	r3, r2
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075e6:	893b      	ldrh	r3, [r7, #8]
 80075e8:	461a      	mov	r2, r3
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fa69 	bl	8007ac4 <USBD_CtlSendData>
 80075f2:	e009      	b.n	8007608 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9e7 	bl	80079ca <USBD_CtlError>
 80075fc:	e004      	b.n	8007608 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 faba 	bl	8007b78 <USBD_CtlSendStatus>
 8007604:	e000      	b.n	8007608 <USBD_GetDescriptor+0x320>
    return;
 8007606:	bf00      	nop
  }
}
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop

08007610 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	889b      	ldrh	r3, [r3, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d131      	bne.n	8007686 <USBD_SetAddress+0x76>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	88db      	ldrh	r3, [r3, #6]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d12d      	bne.n	8007686 <USBD_SetAddress+0x76>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	885b      	ldrh	r3, [r3, #2]
 800762e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007630:	d829      	bhi.n	8007686 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	885b      	ldrh	r3, [r3, #2]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800763c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b03      	cmp	r3, #3
 8007648:	d104      	bne.n	8007654 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f9bc 	bl	80079ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007652:	e01d      	b.n	8007690 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	7bfa      	ldrb	r2, [r7, #15]
 8007658:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 ff8b 	bl	800857c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa86 	bl	8007b78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767a:	e009      	b.n	8007690 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007684:	e004      	b.n	8007690 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f99e 	bl	80079ca <USBD_CtlError>
  }
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	885b      	ldrh	r3, [r3, #2]
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	4b4e      	ldr	r3, [pc, #312]	@ (80077e8 <USBD_SetConfig+0x150>)
 80076ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076b0:	4b4d      	ldr	r3, [pc, #308]	@ (80077e8 <USBD_SetConfig+0x150>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d905      	bls.n	80076c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f985 	bl	80079ca <USBD_CtlError>
    return USBD_FAIL;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e08c      	b.n	80077de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d002      	beq.n	80076d6 <USBD_SetConfig+0x3e>
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d029      	beq.n	8007728 <USBD_SetConfig+0x90>
 80076d4:	e075      	b.n	80077c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80076d6:	4b44      	ldr	r3, [pc, #272]	@ (80077e8 <USBD_SetConfig+0x150>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d020      	beq.n	8007720 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80076de:	4b42      	ldr	r3, [pc, #264]	@ (80077e8 <USBD_SetConfig+0x150>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076e8:	4b3f      	ldr	r3, [pc, #252]	@ (80077e8 <USBD_SetConfig+0x150>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fe ffb9 	bl	8006666 <USBD_SetClassConfig>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f962 	bl	80079ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800770e:	e065      	b.n	80077dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fa31 	bl	8007b78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2203      	movs	r2, #3
 800771a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800771e:	e05d      	b.n	80077dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fa29 	bl	8007b78 <USBD_CtlSendStatus>
      break;
 8007726:	e059      	b.n	80077dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007728:	4b2f      	ldr	r3, [pc, #188]	@ (80077e8 <USBD_SetConfig+0x150>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d112      	bne.n	8007756 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007738:	4b2b      	ldr	r3, [pc, #172]	@ (80077e8 <USBD_SetConfig+0x150>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007742:	4b29      	ldr	r3, [pc, #164]	@ (80077e8 <USBD_SetConfig+0x150>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7fe ffa8 	bl	800669e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa12 	bl	8007b78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007754:	e042      	b.n	80077dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007756:	4b24      	ldr	r3, [pc, #144]	@ (80077e8 <USBD_SetConfig+0x150>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d02a      	beq.n	80077ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7fe ff96 	bl	800669e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007772:	4b1d      	ldr	r3, [pc, #116]	@ (80077e8 <USBD_SetConfig+0x150>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800777c:	4b1a      	ldr	r3, [pc, #104]	@ (80077e8 <USBD_SetConfig+0x150>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fe ff6f 	bl	8006666 <USBD_SetClassConfig>
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00f      	beq.n	80077b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f918 	bl	80079ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fe ff7b 	bl	800669e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80077b0:	e014      	b.n	80077dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9e0 	bl	8007b78 <USBD_CtlSendStatus>
      break;
 80077b8:	e010      	b.n	80077dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f9dc 	bl	8007b78 <USBD_CtlSendStatus>
      break;
 80077c0:	e00c      	b.n	80077dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f900 	bl	80079ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077ca:	4b07      	ldr	r3, [pc, #28]	@ (80077e8 <USBD_SetConfig+0x150>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7fe ff64 	bl	800669e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	73fb      	strb	r3, [r7, #15]
      break;
 80077da:	bf00      	nop
  }

  return ret;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	2000024c 	.word	0x2000024c

080077ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	88db      	ldrh	r3, [r3, #6]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d004      	beq.n	8007808 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f8e2 	bl	80079ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007806:	e023      	b.n	8007850 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	dc02      	bgt.n	800781a <USBD_GetConfig+0x2e>
 8007814:	2b00      	cmp	r3, #0
 8007816:	dc03      	bgt.n	8007820 <USBD_GetConfig+0x34>
 8007818:	e015      	b.n	8007846 <USBD_GetConfig+0x5a>
 800781a:	2b03      	cmp	r3, #3
 800781c:	d00b      	beq.n	8007836 <USBD_GetConfig+0x4a>
 800781e:	e012      	b.n	8007846 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3308      	adds	r3, #8
 800782a:	2201      	movs	r2, #1
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f948 	bl	8007ac4 <USBD_CtlSendData>
        break;
 8007834:	e00c      	b.n	8007850 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3304      	adds	r3, #4
 800783a:	2201      	movs	r2, #1
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f940 	bl	8007ac4 <USBD_CtlSendData>
        break;
 8007844:	e004      	b.n	8007850 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f8be 	bl	80079ca <USBD_CtlError>
        break;
 800784e:	bf00      	nop
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	2b02      	cmp	r3, #2
 800786e:	d81e      	bhi.n	80078ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	88db      	ldrh	r3, [r3, #6]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d004      	beq.n	8007882 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8a5 	bl	80079ca <USBD_CtlError>
        break;
 8007880:	e01a      	b.n	80078b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f043 0202 	orr.w	r2, r3, #2
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	330c      	adds	r3, #12
 80078a2:	2202      	movs	r2, #2
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f90c 	bl	8007ac4 <USBD_CtlSendData>
      break;
 80078ac:	e004      	b.n	80078b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f88a 	bl	80079ca <USBD_CtlError>
      break;
 80078b6:	bf00      	nop
  }
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	885b      	ldrh	r3, [r3, #2]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d107      	bne.n	80078e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f94c 	bl	8007b78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80078e0:	e013      	b.n	800790a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d10b      	bne.n	8007902 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	889b      	ldrh	r3, [r3, #4]
 80078ee:	0a1b      	lsrs	r3, r3, #8
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f93c 	bl	8007b78 <USBD_CtlSendStatus>
}
 8007900:	e003      	b.n	800790a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f860 	bl	80079ca <USBD_CtlError>
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007922:	b2db      	uxtb	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	2b02      	cmp	r3, #2
 8007928:	d80b      	bhi.n	8007942 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	885b      	ldrh	r3, [r3, #2]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d10c      	bne.n	800794c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f91c 	bl	8007b78 <USBD_CtlSendStatus>
      }
      break;
 8007940:	e004      	b.n	800794c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f840 	bl	80079ca <USBD_CtlError>
      break;
 800794a:	e000      	b.n	800794e <USBD_ClrFeature+0x3c>
      break;
 800794c:	bf00      	nop
  }
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	781a      	ldrb	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	781a      	ldrb	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3301      	adds	r3, #1
 800797e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7ff fa16 	bl	8006db2 <SWAPBYTE>
 8007986:	4603      	mov	r3, r0
 8007988:	461a      	mov	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f7ff fa09 	bl	8006db2 <SWAPBYTE>
 80079a0:	4603      	mov	r3, r0
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3301      	adds	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7ff f9fc 	bl	8006db2 <SWAPBYTE>
 80079ba:	4603      	mov	r3, r0
 80079bc:	461a      	mov	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	80da      	strh	r2, [r3, #6]
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079d4:	2180      	movs	r1, #128	@ 0x80
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fd66 	bl	80084a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079dc:	2100      	movs	r1, #0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fd62 	bl	80084a8 <USBD_LL_StallEP>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d042      	beq.n	8007a88 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f000 f842 	bl	8007a90 <USBD_GetLen>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	3301      	adds	r3, #1
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a16:	d808      	bhi.n	8007a2a <USBD_GetString+0x3e>
 8007a18:	6938      	ldr	r0, [r7, #16]
 8007a1a:	f000 f839 	bl	8007a90 <USBD_GetLen>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	3301      	adds	r3, #1
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	e001      	b.n	8007a2e <USBD_GetString+0x42>
 8007a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	4413      	add	r3, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	3301      	adds	r3, #1
 8007a42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	3301      	adds	r3, #1
 8007a52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a54:	e013      	b.n	8007a7e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	7812      	ldrb	r2, [r2, #0]
 8007a60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	3301      	adds	r3, #1
 8007a66:	613b      	str	r3, [r7, #16]
    idx++;
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	4413      	add	r3, r2
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e7      	bne.n	8007a56 <USBD_GetString+0x6a>
 8007a86:	e000      	b.n	8007a8a <USBD_GetString+0x9e>
    return;
 8007a88:	bf00      	nop
  }
}
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007aa0:	e005      	b.n	8007aae <USBD_GetLen+0x1e>
  {
    len++;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1f5      	bne.n	8007aa2 <USBD_GetLen+0x12>
  }

  return len;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fd65 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fd54 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	2100      	movs	r1, #0
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fd58 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	2100      	movs	r1, #0
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 fd47 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2204      	movs	r2, #4
 8007b84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fd13 	bl	80085ba <USBD_LL_Transmit>

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2205      	movs	r2, #5
 8007baa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fd21 	bl	80085fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	4912      	ldr	r1, [pc, #72]	@ (8007c14 <MX_USB_DEVICE_Init+0x50>)
 8007bcc:	4812      	ldr	r0, [pc, #72]	@ (8007c18 <MX_USB_DEVICE_Init+0x54>)
 8007bce:	f7fe fccd 	bl	800656c <USBD_Init>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bd8:	f7f8 ffd2 	bl	8000b80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007bdc:	490f      	ldr	r1, [pc, #60]	@ (8007c1c <MX_USB_DEVICE_Init+0x58>)
 8007bde:	480e      	ldr	r0, [pc, #56]	@ (8007c18 <MX_USB_DEVICE_Init+0x54>)
 8007be0:	f7fe fcf4 	bl	80065cc <USBD_RegisterClass>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bea:	f7f8 ffc9 	bl	8000b80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007bee:	490c      	ldr	r1, [pc, #48]	@ (8007c20 <MX_USB_DEVICE_Init+0x5c>)
 8007bf0:	4809      	ldr	r0, [pc, #36]	@ (8007c18 <MX_USB_DEVICE_Init+0x54>)
 8007bf2:	f7fe fbeb 	bl	80063cc <USBD_CDC_RegisterInterface>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007bfc:	f7f8 ffc0 	bl	8000b80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c00:	4805      	ldr	r0, [pc, #20]	@ (8007c18 <MX_USB_DEVICE_Init+0x54>)
 8007c02:	f7fe fd19 	bl	8006638 <USBD_Start>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c0c:	f7f8 ffb8 	bl	8000b80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c10:	bf00      	nop
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	200000ac 	.word	0x200000ac
 8007c18:	20000250 	.word	0x20000250
 8007c1c:	20000018 	.word	0x20000018
 8007c20:	20000098 	.word	0x20000098

08007c24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4905      	ldr	r1, [pc, #20]	@ (8007c40 <CDC_Init_FS+0x1c>)
 8007c2c:	4805      	ldr	r0, [pc, #20]	@ (8007c44 <CDC_Init_FS+0x20>)
 8007c2e:	f7fe fbe7 	bl	8006400 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c32:	4905      	ldr	r1, [pc, #20]	@ (8007c48 <CDC_Init_FS+0x24>)
 8007c34:	4803      	ldr	r0, [pc, #12]	@ (8007c44 <CDC_Init_FS+0x20>)
 8007c36:	f7fe fc05 	bl	8006444 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000d2c 	.word	0x20000d2c
 8007c44:	20000250 	.word	0x20000250
 8007c48:	2000052c 	.word	0x2000052c

08007c4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	6039      	str	r1, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	2b23      	cmp	r3, #35	@ 0x23
 8007c70:	d84a      	bhi.n	8007d08 <CDC_Control_FS+0xac>
 8007c72:	a201      	add	r2, pc, #4	@ (adr r2, 8007c78 <CDC_Control_FS+0x1c>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007d09 	.word	0x08007d09
 8007c7c:	08007d09 	.word	0x08007d09
 8007c80:	08007d09 	.word	0x08007d09
 8007c84:	08007d09 	.word	0x08007d09
 8007c88:	08007d09 	.word	0x08007d09
 8007c8c:	08007d09 	.word	0x08007d09
 8007c90:	08007d09 	.word	0x08007d09
 8007c94:	08007d09 	.word	0x08007d09
 8007c98:	08007d09 	.word	0x08007d09
 8007c9c:	08007d09 	.word	0x08007d09
 8007ca0:	08007d09 	.word	0x08007d09
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007d09 	.word	0x08007d09
 8007cac:	08007d09 	.word	0x08007d09
 8007cb0:	08007d09 	.word	0x08007d09
 8007cb4:	08007d09 	.word	0x08007d09
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	08007d09 	.word	0x08007d09
 8007cc0:	08007d09 	.word	0x08007d09
 8007cc4:	08007d09 	.word	0x08007d09
 8007cc8:	08007d09 	.word	0x08007d09
 8007ccc:	08007d09 	.word	0x08007d09
 8007cd0:	08007d09 	.word	0x08007d09
 8007cd4:	08007d09 	.word	0x08007d09
 8007cd8:	08007d09 	.word	0x08007d09
 8007cdc:	08007d09 	.word	0x08007d09
 8007ce0:	08007d09 	.word	0x08007d09
 8007ce4:	08007d09 	.word	0x08007d09
 8007ce8:	08007d09 	.word	0x08007d09
 8007cec:	08007d09 	.word	0x08007d09
 8007cf0:	08007d09 	.word	0x08007d09
 8007cf4:	08007d09 	.word	0x08007d09
 8007cf8:	08007d09 	.word	0x08007d09
 8007cfc:	08007d09 	.word	0x08007d09
 8007d00:	08007d09 	.word	0x08007d09
 8007d04:	08007d09 	.word	0x08007d09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d08:	bf00      	nop
  }

  return (USBD_OK);
 8007d0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4826      	ldr	r0, [pc, #152]	@ (8007dc0 <CDC_Receive_FS+0xa8>)
 8007d26:	f7fe fb8d 	bl	8006444 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d2a:	4825      	ldr	r0, [pc, #148]	@ (8007dc0 <CDC_Receive_FS+0xa8>)
 8007d2c:	f7fe fbe8 	bl	8006500 <USBD_CDC_ReceivePacket>

  memset (USB_RX_Buf, '\0', 10);  // clear the buffer
 8007d30:	220a      	movs	r2, #10
 8007d32:	2100      	movs	r1, #0
 8007d34:	4823      	ldr	r0, [pc, #140]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d36:	f000 fdd3 	bl	80088e0 <memset>
  uint8_t len = (uint8_t)*Len;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	73fb      	strb	r3, [r7, #15]
  memcpy(USB_RX_Buf, Buf, len);  // copy the data to the buffer
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	461a      	mov	r2, r3
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	481f      	ldr	r0, [pc, #124]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d48:	f000 fe0e 	bl	8008968 <memcpy>

  if((USB_RX_Buf[0]=='#')&&(USB_RX_Buf[9]='\n'))
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b23      	cmp	r3, #35	@ 0x23
 8007d52:	d123      	bne.n	8007d9c <CDC_Receive_FS+0x84>
 8007d54:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d56:	220a      	movs	r2, #10
 8007d58:	725a      	strb	r2, [r3, #9]
  {
	  data1_rec.bytes[0]=USB_RX_Buf[1];
 8007d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d5c:	785a      	ldrb	r2, [r3, #1]
 8007d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <CDC_Receive_FS+0xb0>)
 8007d60:	701a      	strb	r2, [r3, #0]
	  data1_rec.bytes[1]=USB_RX_Buf[2];
 8007d62:	4b18      	ldr	r3, [pc, #96]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d64:	789a      	ldrb	r2, [r3, #2]
 8007d66:	4b18      	ldr	r3, [pc, #96]	@ (8007dc8 <CDC_Receive_FS+0xb0>)
 8007d68:	705a      	strb	r2, [r3, #1]
	  data1_rec.bytes[2]=USB_RX_Buf[3];
 8007d6a:	4b16      	ldr	r3, [pc, #88]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d6c:	78da      	ldrb	r2, [r3, #3]
 8007d6e:	4b16      	ldr	r3, [pc, #88]	@ (8007dc8 <CDC_Receive_FS+0xb0>)
 8007d70:	709a      	strb	r2, [r3, #2]
	  data1_rec.bytes[3]=USB_RX_Buf[4];
 8007d72:	4b14      	ldr	r3, [pc, #80]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d74:	791a      	ldrb	r2, [r3, #4]
 8007d76:	4b14      	ldr	r3, [pc, #80]	@ (8007dc8 <CDC_Receive_FS+0xb0>)
 8007d78:	70da      	strb	r2, [r3, #3]

	  data2_rec.bytes[0]=USB_RX_Buf[5];
 8007d7a:	4b12      	ldr	r3, [pc, #72]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d7c:	795a      	ldrb	r2, [r3, #5]
 8007d7e:	4b13      	ldr	r3, [pc, #76]	@ (8007dcc <CDC_Receive_FS+0xb4>)
 8007d80:	701a      	strb	r2, [r3, #0]
	  data2_rec.bytes[1]=USB_RX_Buf[6];
 8007d82:	4b10      	ldr	r3, [pc, #64]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d84:	799a      	ldrb	r2, [r3, #6]
 8007d86:	4b11      	ldr	r3, [pc, #68]	@ (8007dcc <CDC_Receive_FS+0xb4>)
 8007d88:	705a      	strb	r2, [r3, #1]
	  data2_rec.bytes[2]=USB_RX_Buf[7];
 8007d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d8c:	79da      	ldrb	r2, [r3, #7]
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007dcc <CDC_Receive_FS+0xb4>)
 8007d90:	709a      	strb	r2, [r3, #2]
	  data2_rec.bytes[3]=USB_RX_Buf[8];
 8007d92:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc4 <CDC_Receive_FS+0xac>)
 8007d94:	7a1a      	ldrb	r2, [r3, #8]
 8007d96:	4b0d      	ldr	r3, [pc, #52]	@ (8007dcc <CDC_Receive_FS+0xb4>)
 8007d98:	70da      	strb	r2, [r3, #3]
 8007d9a:	e005      	b.n	8007da8 <CDC_Receive_FS+0x90>
  }
  else{
	  usb_read_error++;
 8007d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd0 <CDC_Receive_FS+0xb8>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	3301      	adds	r3, #1
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd0 <CDC_Receive_FS+0xb8>)
 8007da6:	701a      	strb	r2, [r3, #0]
  }
  memset(Buf, '\0', len);   // clear the Buf also
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	461a      	mov	r2, r3
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fd96 	bl	80088e0 <memset>


  return (USBD_OK);
 8007db4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000250 	.word	0x20000250
 8007dc4:	200001f8 	.word	0x200001f8
 8007dc8:	20000234 	.word	0x20000234
 8007dcc:	20000238 	.word	0x20000238
 8007dd0:	2000023c 	.word	0x2000023c

08007dd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007de4:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <CDC_Transmit_FS+0x48>)
 8007de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e00b      	b.n	8007e12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007dfa:	887b      	ldrh	r3, [r7, #2]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	4806      	ldr	r0, [pc, #24]	@ (8007e1c <CDC_Transmit_FS+0x48>)
 8007e02:	f7fe fafd 	bl	8006400 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e06:	4805      	ldr	r0, [pc, #20]	@ (8007e1c <CDC_Transmit_FS+0x48>)
 8007e08:	f7fe fb3a 	bl	8006480 <USBD_CDC_TransmitPacket>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000250 	.word	0x20000250

08007e20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2212      	movs	r2, #18
 8007e54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e56:	4b03      	ldr	r3, [pc, #12]	@ (8007e64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	200000cc 	.word	0x200000cc

08007e68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2204      	movs	r2, #4
 8007e78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e7a:	4b03      	ldr	r3, [pc, #12]	@ (8007e88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	200000ec 	.word	0x200000ec

08007e8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	6039      	str	r1, [r7, #0]
 8007e96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	4907      	ldr	r1, [pc, #28]	@ (8007ec0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ea2:	4808      	ldr	r0, [pc, #32]	@ (8007ec4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ea4:	f7ff fda2 	bl	80079ec <USBD_GetString>
 8007ea8:	e004      	b.n	8007eb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4904      	ldr	r1, [pc, #16]	@ (8007ec0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eae:	4805      	ldr	r0, [pc, #20]	@ (8007ec4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007eb0:	f7ff fd9c 	bl	80079ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8007eb4:	4b02      	ldr	r3, [pc, #8]	@ (8007ec0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	2000152c 	.word	0x2000152c
 8007ec4:	08008a30 	.word	0x08008a30

08007ec8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	6039      	str	r1, [r7, #0]
 8007ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	4904      	ldr	r1, [pc, #16]	@ (8007ee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ed8:	4804      	ldr	r0, [pc, #16]	@ (8007eec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007eda:	f7ff fd87 	bl	80079ec <USBD_GetString>
  return USBD_StrDesc;
 8007ede:	4b02      	ldr	r3, [pc, #8]	@ (8007ee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	2000152c 	.word	0x2000152c
 8007eec:	08008a48 	.word	0x08008a48

08007ef0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	6039      	str	r1, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	221a      	movs	r2, #26
 8007f00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f02:	f000 f855 	bl	8007fb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f06:	4b02      	ldr	r3, [pc, #8]	@ (8007f10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	200000f0 	.word	0x200000f0

08007f14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d105      	bne.n	8007f32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	4907      	ldr	r1, [pc, #28]	@ (8007f48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f2a:	4808      	ldr	r0, [pc, #32]	@ (8007f4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f2c:	f7ff fd5e 	bl	80079ec <USBD_GetString>
 8007f30:	e004      	b.n	8007f3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	4904      	ldr	r1, [pc, #16]	@ (8007f48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f36:	4805      	ldr	r0, [pc, #20]	@ (8007f4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f38:	f7ff fd58 	bl	80079ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f3c:	4b02      	ldr	r3, [pc, #8]	@ (8007f48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	2000152c 	.word	0x2000152c
 8007f4c:	08008a5c 	.word	0x08008a5c

08007f50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	6039      	str	r1, [r7, #0]
 8007f5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d105      	bne.n	8007f6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	4907      	ldr	r1, [pc, #28]	@ (8007f84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f66:	4808      	ldr	r0, [pc, #32]	@ (8007f88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f68:	f7ff fd40 	bl	80079ec <USBD_GetString>
 8007f6c:	e004      	b.n	8007f78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	4904      	ldr	r1, [pc, #16]	@ (8007f84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f72:	4805      	ldr	r0, [pc, #20]	@ (8007f88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f74:	f7ff fd3a 	bl	80079ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f78:	4b02      	ldr	r3, [pc, #8]	@ (8007f84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000152c 	.word	0x2000152c
 8007f88:	08008a68 	.word	0x08008a68

08007f8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	220c      	movs	r2, #12
 8007f9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007f9e:	4b03      	ldr	r3, [pc, #12]	@ (8007fac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	200000e0 	.word	0x200000e0

08007fb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff4 <Get_SerialNum+0x44>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff8 <Get_SerialNum+0x48>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007ffc <Get_SerialNum+0x4c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d009      	beq.n	8007fea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	4909      	ldr	r1, [pc, #36]	@ (8008000 <Get_SerialNum+0x50>)
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 f814 	bl	8008008 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	4908      	ldr	r1, [pc, #32]	@ (8008004 <Get_SerialNum+0x54>)
 8007fe4:	68b8      	ldr	r0, [r7, #8]
 8007fe6:	f000 f80f 	bl	8008008 <IntToUnicode>
  }
}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	1ff0f420 	.word	0x1ff0f420
 8007ff8:	1ff0f424 	.word	0x1ff0f424
 8007ffc:	1ff0f428 	.word	0x1ff0f428
 8008000:	200000f2 	.word	0x200000f2
 8008004:	20000102 	.word	0x20000102

08008008 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800801a:	2300      	movs	r3, #0
 800801c:	75fb      	strb	r3, [r7, #23]
 800801e:	e027      	b.n	8008070 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	0f1b      	lsrs	r3, r3, #28
 8008024:	2b09      	cmp	r3, #9
 8008026:	d80b      	bhi.n	8008040 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	0f1b      	lsrs	r3, r3, #28
 800802c:	b2da      	uxtb	r2, r3
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4619      	mov	r1, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	440b      	add	r3, r1
 8008038:	3230      	adds	r2, #48	@ 0x30
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e00a      	b.n	8008056 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	0f1b      	lsrs	r3, r3, #28
 8008044:	b2da      	uxtb	r2, r3
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	4619      	mov	r1, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	440b      	add	r3, r1
 8008050:	3237      	adds	r2, #55	@ 0x37
 8008052:	b2d2      	uxtb	r2, r2
 8008054:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	3301      	adds	r3, #1
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	4413      	add	r3, r2
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	3301      	adds	r3, #1
 800806e:	75fb      	strb	r3, [r7, #23]
 8008070:	7dfa      	ldrb	r2, [r7, #23]
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	429a      	cmp	r2, r3
 8008076:	d3d3      	bcc.n	8008020 <IntToUnicode+0x18>
  }
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b0ac      	sub	sp, #176	@ 0xb0
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008090:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	605a      	str	r2, [r3, #4]
 800809a:	609a      	str	r2, [r3, #8]
 800809c:	60da      	str	r2, [r3, #12]
 800809e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080a0:	f107 0318 	add.w	r3, r7, #24
 80080a4:	2284      	movs	r2, #132	@ 0x84
 80080a6:	2100      	movs	r1, #0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fc19 	bl	80088e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080b6:	d151      	bne.n	800815c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80080b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80080bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80080be:	2300      	movs	r3, #0
 80080c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080c4:	f107 0318 	add.w	r3, r7, #24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fb f98d 	bl	80033e8 <HAL_RCCEx_PeriphCLKConfig>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80080d4:	f7f8 fd54 	bl	8000b80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080d8:	4b22      	ldr	r3, [pc, #136]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 80080da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080dc:	4a21      	ldr	r2, [pc, #132]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80080e4:	4b1f      	ldr	r3, [pc, #124]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 80080e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80080f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f8:	2302      	movs	r3, #2
 80080fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008104:	2303      	movs	r3, #3
 8008106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800810a:	230a      	movs	r3, #10
 800810c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008110:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008114:	4619      	mov	r1, r3
 8008116:	4814      	ldr	r0, [pc, #80]	@ (8008168 <HAL_PCD_MspInit+0xe0>)
 8008118:	f7f9 f816 	bl	8001148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800811c:	4b11      	ldr	r3, [pc, #68]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 800811e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008120:	4a10      	ldr	r2, [pc, #64]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 8008122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008126:	6353      	str	r3, [r2, #52]	@ 0x34
 8008128:	4b0e      	ldr	r3, [pc, #56]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 800812a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4b0b      	ldr	r3, [pc, #44]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 8008136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008138:	4a0a      	ldr	r2, [pc, #40]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 800813a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800813e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008140:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <HAL_PCD_MspInit+0xdc>)
 8008142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800814c:	2200      	movs	r2, #0
 800814e:	2100      	movs	r1, #0
 8008150:	2043      	movs	r0, #67	@ 0x43
 8008152:	f7f8 ffc2 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008156:	2043      	movs	r0, #67	@ 0x43
 8008158:	f7f8 ffdb 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800815c:	bf00      	nop
 800815e:	37b0      	adds	r7, #176	@ 0xb0
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40023800 	.word	0x40023800
 8008168:	40020000 	.word	0x40020000

0800816c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f7fe faa5 	bl	80066d2 <USBD_LL_SetupStage>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	4619      	mov	r1, r3
 80081ba:	f7fe fadf 	bl	800677c <USBD_LL_DataOutStage>
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	4613      	mov	r3, r2
 80081de:	00db      	lsls	r3, r3, #3
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	440b      	add	r3, r1
 80081e6:	3320      	adds	r3, #32
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	4619      	mov	r1, r3
 80081ee:	f7fe fb78 	bl	80068e2 <USBD_LL_DataInStage>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fcb2 	bl	8006b72 <USBD_LL_SOF>
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800821e:	2301      	movs	r3, #1
 8008220:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	79db      	ldrb	r3, [r3, #7]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e008      	b.n	8008242 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	79db      	ldrb	r3, [r3, #7]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d102      	bne.n	800823e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008238:	2301      	movs	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	e001      	b.n	8008242 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800823e:	f7f8 fc9f 	bl	8000b80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fc4c 	bl	8006aea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fbf4 	bl	8006a46 <USBD_LL_Reset>
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fc47 	bl	8006b0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7adb      	ldrb	r3, [r3, #11]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800829c:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <HAL_PCD_SuspendCallback+0x48>)
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	4a03      	ldr	r2, [pc, #12]	@ (80082b0 <HAL_PCD_SuspendCallback+0x48>)
 80082a2:	f043 0306 	orr.w	r3, r3, #6
 80082a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	e000ed00 	.word	0xe000ed00

080082b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fc3d 	bl	8006b42 <USBD_LL_Resume>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fc95 	bl	8006c16 <USBD_LL_IsoOUTIncomplete>
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fc51 	bl	8006bb2 <USBD_LL_IsoINIncomplete>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fca7 	bl	8006c7a <USBD_LL_DevConnected>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fca4 	bl	8006c90 <USBD_LL_DevDisconnected>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d13c      	bne.n	80083da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008360:	4a20      	ldr	r2, [pc, #128]	@ (80083e4 <USBD_LL_Init+0x94>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a1e      	ldr	r2, [pc, #120]	@ (80083e4 <USBD_LL_Init+0x94>)
 800836c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008370:	4b1c      	ldr	r3, [pc, #112]	@ (80083e4 <USBD_LL_Init+0x94>)
 8008372:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008376:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008378:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <USBD_LL_Init+0x94>)
 800837a:	2206      	movs	r2, #6
 800837c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800837e:	4b19      	ldr	r3, [pc, #100]	@ (80083e4 <USBD_LL_Init+0x94>)
 8008380:	2202      	movs	r2, #2
 8008382:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008384:	4b17      	ldr	r3, [pc, #92]	@ (80083e4 <USBD_LL_Init+0x94>)
 8008386:	2200      	movs	r2, #0
 8008388:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800838a:	4b16      	ldr	r3, [pc, #88]	@ (80083e4 <USBD_LL_Init+0x94>)
 800838c:	2202      	movs	r2, #2
 800838e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008390:	4b14      	ldr	r3, [pc, #80]	@ (80083e4 <USBD_LL_Init+0x94>)
 8008392:	2200      	movs	r2, #0
 8008394:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008396:	4b13      	ldr	r3, [pc, #76]	@ (80083e4 <USBD_LL_Init+0x94>)
 8008398:	2200      	movs	r2, #0
 800839a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800839c:	4b11      	ldr	r3, [pc, #68]	@ (80083e4 <USBD_LL_Init+0x94>)
 800839e:	2200      	movs	r2, #0
 80083a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083a2:	4b10      	ldr	r3, [pc, #64]	@ (80083e4 <USBD_LL_Init+0x94>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083a8:	4b0e      	ldr	r3, [pc, #56]	@ (80083e4 <USBD_LL_Init+0x94>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083ae:	480d      	ldr	r0, [pc, #52]	@ (80083e4 <USBD_LL_Init+0x94>)
 80083b0:	f7f9 f88f 	bl	80014d2 <HAL_PCD_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083ba:	f7f8 fbe1 	bl	8000b80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083be:	2180      	movs	r1, #128	@ 0x80
 80083c0:	4808      	ldr	r0, [pc, #32]	@ (80083e4 <USBD_LL_Init+0x94>)
 80083c2:	f7fa fada 	bl	800297a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083c6:	2240      	movs	r2, #64	@ 0x40
 80083c8:	2100      	movs	r1, #0
 80083ca:	4806      	ldr	r0, [pc, #24]	@ (80083e4 <USBD_LL_Init+0x94>)
 80083cc:	f7fa fa8e 	bl	80028ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083d0:	2280      	movs	r2, #128	@ 0x80
 80083d2:	2101      	movs	r1, #1
 80083d4:	4803      	ldr	r0, [pc, #12]	@ (80083e4 <USBD_LL_Init+0x94>)
 80083d6:	f7fa fa89 	bl	80028ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	2000172c 	.word	0x2000172c

080083e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083fe:	4618      	mov	r0, r3
 8008400:	f7f9 f97d 	bl	80016fe <HAL_PCD_Start>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f97e 	bl	800870c <USBD_Get_USB_Status>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008414:	7bbb      	ldrb	r3, [r7, #14]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	461a      	mov	r2, r3
 800842c:	4603      	mov	r3, r0
 800842e:	70fb      	strb	r3, [r7, #3]
 8008430:	460b      	mov	r3, r1
 8008432:	70bb      	strb	r3, [r7, #2]
 8008434:	4613      	mov	r3, r2
 8008436:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008446:	78bb      	ldrb	r3, [r7, #2]
 8008448:	883a      	ldrh	r2, [r7, #0]
 800844a:	78f9      	ldrb	r1, [r7, #3]
 800844c:	f7f9 fe6b 	bl	8002126 <HAL_PCD_EP_Open>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f958 	bl	800870c <USBD_Get_USB_Status>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008460:	7bbb      	ldrb	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7f9 feb4 	bl	80021f6 <HAL_PCD_EP_Close>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 f939 	bl	800870c <USBD_Get_USB_Status>
 800849a:	4603      	mov	r3, r0
 800849c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800849e:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7f9 ff6c 	bl	80023a4 <HAL_PCD_EP_SetStall>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f91a 	bl	800870c <USBD_Get_USB_Status>
 80084d8:	4603      	mov	r3, r0
 80084da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008500:	78fa      	ldrb	r2, [r7, #3]
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f7f9 ffb0 	bl	800246a <HAL_PCD_EP_ClrStall>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f8fb 	bl	800870c <USBD_Get_USB_Status>
 8008516:	4603      	mov	r3, r0
 8008518:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800851a:	7bbb      	ldrb	r3, [r7, #14]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008536:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da0b      	bge.n	8008558 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	4613      	mov	r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	3316      	adds	r3, #22
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	e00b      	b.n	8008570 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800856e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	4611      	mov	r1, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f7f9 fd9f 	bl	80020de <HAL_PCD_SetAddress>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f8b0 	bl	800870c <USBD_Get_USB_Status>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
 80085c6:	460b      	mov	r3, r1
 80085c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085d8:	7af9      	ldrb	r1, [r7, #11]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	f7f9 fea7 	bl	8002330 <HAL_PCD_EP_Transmit>
 80085e2:	4603      	mov	r3, r0
 80085e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f88f 	bl	800870c <USBD_Get_USB_Status>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	460b      	mov	r3, r1
 800860a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800861a:	7af9      	ldrb	r1, [r7, #11]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	f7f9 fe33 	bl	800228a <HAL_PCD_EP_Receive>
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008628:	7dfb      	ldrb	r3, [r7, #23]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f86e 	bl	800870c <USBD_Get_USB_Status>
 8008630:	4603      	mov	r3, r0
 8008632:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008634:	7dbb      	ldrb	r3, [r7, #22]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f7f9 fe53 	bl	8002300 <HAL_PCD_EP_GetRxCount>
 800865a:	4603      	mov	r3, r0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_PCDEx_LPM_Callback+0x18>
 8008676:	2b01      	cmp	r3, #1
 8008678:	d01f      	beq.n	80086ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800867a:	e03b      	b.n	80086f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	7adb      	ldrb	r3, [r3, #11]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d007      	beq.n	8008694 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008684:	f000 f83c 	bl	8008700 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008688:	4b1c      	ldr	r3, [pc, #112]	@ (80086fc <HAL_PCDEx_LPM_Callback+0x98>)
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	4a1b      	ldr	r2, [pc, #108]	@ (80086fc <HAL_PCDEx_LPM_Callback+0x98>)
 800868e:	f023 0306 	bic.w	r3, r3, #6
 8008692:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fa45 	bl	8006b42 <USBD_LL_Resume>
    break;
 80086b8:	e01c      	b.n	80086f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	6812      	ldr	r2, [r2, #0]
 80086c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fa16 	bl	8006b0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	7adb      	ldrb	r3, [r3, #11]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086e6:	4b05      	ldr	r3, [pc, #20]	@ (80086fc <HAL_PCDEx_LPM_Callback+0x98>)
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	4a04      	ldr	r2, [pc, #16]	@ (80086fc <HAL_PCDEx_LPM_Callback+0x98>)
 80086ec:	f043 0306 	orr.w	r3, r3, #6
 80086f0:	6113      	str	r3, [r2, #16]
    break;
 80086f2:	bf00      	nop
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	e000ed00 	.word	0xe000ed00

08008700 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008704:	f7f8 f918 	bl	8000938 <SystemClock_Config>
}
 8008708:	bf00      	nop
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d817      	bhi.n	8008750 <USBD_Get_USB_Status+0x44>
 8008720:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <USBD_Get_USB_Status+0x1c>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	08008739 	.word	0x08008739
 800872c:	0800873f 	.word	0x0800873f
 8008730:	08008745 	.word	0x08008745
 8008734:	0800874b 	.word	0x0800874b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e00b      	b.n	8008756 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e008      	b.n	8008756 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008744:	2301      	movs	r3, #1
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	e005      	b.n	8008756 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	73fb      	strb	r3, [r7, #15]
    break;
 800874e:	e002      	b.n	8008756 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008750:	2303      	movs	r3, #3
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	bf00      	nop
  }
  return usb_status;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <malloc>:
 8008764:	4b02      	ldr	r3, [pc, #8]	@ (8008770 <malloc+0xc>)
 8008766:	4601      	mov	r1, r0
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	f000 b82d 	b.w	80087c8 <_malloc_r>
 800876e:	bf00      	nop
 8008770:	2000010c 	.word	0x2000010c

08008774 <free>:
 8008774:	4b02      	ldr	r3, [pc, #8]	@ (8008780 <free+0xc>)
 8008776:	4601      	mov	r1, r0
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	f000 b903 	b.w	8008984 <_free_r>
 800877e:	bf00      	nop
 8008780:	2000010c 	.word	0x2000010c

08008784 <sbrk_aligned>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4e0f      	ldr	r6, [pc, #60]	@ (80087c4 <sbrk_aligned+0x40>)
 8008788:	460c      	mov	r4, r1
 800878a:	6831      	ldr	r1, [r6, #0]
 800878c:	4605      	mov	r5, r0
 800878e:	b911      	cbnz	r1, 8008796 <sbrk_aligned+0x12>
 8008790:	f000 f8ae 	bl	80088f0 <_sbrk_r>
 8008794:	6030      	str	r0, [r6, #0]
 8008796:	4621      	mov	r1, r4
 8008798:	4628      	mov	r0, r5
 800879a:	f000 f8a9 	bl	80088f0 <_sbrk_r>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d103      	bne.n	80087aa <sbrk_aligned+0x26>
 80087a2:	f04f 34ff 	mov.w	r4, #4294967295
 80087a6:	4620      	mov	r0, r4
 80087a8:	bd70      	pop	{r4, r5, r6, pc}
 80087aa:	1cc4      	adds	r4, r0, #3
 80087ac:	f024 0403 	bic.w	r4, r4, #3
 80087b0:	42a0      	cmp	r0, r4
 80087b2:	d0f8      	beq.n	80087a6 <sbrk_aligned+0x22>
 80087b4:	1a21      	subs	r1, r4, r0
 80087b6:	4628      	mov	r0, r5
 80087b8:	f000 f89a 	bl	80088f0 <_sbrk_r>
 80087bc:	3001      	adds	r0, #1
 80087be:	d1f2      	bne.n	80087a6 <sbrk_aligned+0x22>
 80087c0:	e7ef      	b.n	80087a2 <sbrk_aligned+0x1e>
 80087c2:	bf00      	nop
 80087c4:	20001c0c 	.word	0x20001c0c

080087c8 <_malloc_r>:
 80087c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087cc:	1ccd      	adds	r5, r1, #3
 80087ce:	f025 0503 	bic.w	r5, r5, #3
 80087d2:	3508      	adds	r5, #8
 80087d4:	2d0c      	cmp	r5, #12
 80087d6:	bf38      	it	cc
 80087d8:	250c      	movcc	r5, #12
 80087da:	2d00      	cmp	r5, #0
 80087dc:	4606      	mov	r6, r0
 80087de:	db01      	blt.n	80087e4 <_malloc_r+0x1c>
 80087e0:	42a9      	cmp	r1, r5
 80087e2:	d904      	bls.n	80087ee <_malloc_r+0x26>
 80087e4:	230c      	movs	r3, #12
 80087e6:	6033      	str	r3, [r6, #0]
 80087e8:	2000      	movs	r0, #0
 80087ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088c4 <_malloc_r+0xfc>
 80087f2:	f000 f869 	bl	80088c8 <__malloc_lock>
 80087f6:	f8d8 3000 	ldr.w	r3, [r8]
 80087fa:	461c      	mov	r4, r3
 80087fc:	bb44      	cbnz	r4, 8008850 <_malloc_r+0x88>
 80087fe:	4629      	mov	r1, r5
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff ffbf 	bl	8008784 <sbrk_aligned>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	4604      	mov	r4, r0
 800880a:	d158      	bne.n	80088be <_malloc_r+0xf6>
 800880c:	f8d8 4000 	ldr.w	r4, [r8]
 8008810:	4627      	mov	r7, r4
 8008812:	2f00      	cmp	r7, #0
 8008814:	d143      	bne.n	800889e <_malloc_r+0xd6>
 8008816:	2c00      	cmp	r4, #0
 8008818:	d04b      	beq.n	80088b2 <_malloc_r+0xea>
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	4639      	mov	r1, r7
 800881e:	4630      	mov	r0, r6
 8008820:	eb04 0903 	add.w	r9, r4, r3
 8008824:	f000 f864 	bl	80088f0 <_sbrk_r>
 8008828:	4581      	cmp	r9, r0
 800882a:	d142      	bne.n	80088b2 <_malloc_r+0xea>
 800882c:	6821      	ldr	r1, [r4, #0]
 800882e:	1a6d      	subs	r5, r5, r1
 8008830:	4629      	mov	r1, r5
 8008832:	4630      	mov	r0, r6
 8008834:	f7ff ffa6 	bl	8008784 <sbrk_aligned>
 8008838:	3001      	adds	r0, #1
 800883a:	d03a      	beq.n	80088b2 <_malloc_r+0xea>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	442b      	add	r3, r5
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	f8d8 3000 	ldr.w	r3, [r8]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	bb62      	cbnz	r2, 80088a4 <_malloc_r+0xdc>
 800884a:	f8c8 7000 	str.w	r7, [r8]
 800884e:	e00f      	b.n	8008870 <_malloc_r+0xa8>
 8008850:	6822      	ldr	r2, [r4, #0]
 8008852:	1b52      	subs	r2, r2, r5
 8008854:	d420      	bmi.n	8008898 <_malloc_r+0xd0>
 8008856:	2a0b      	cmp	r2, #11
 8008858:	d917      	bls.n	800888a <_malloc_r+0xc2>
 800885a:	1961      	adds	r1, r4, r5
 800885c:	42a3      	cmp	r3, r4
 800885e:	6025      	str	r5, [r4, #0]
 8008860:	bf18      	it	ne
 8008862:	6059      	strne	r1, [r3, #4]
 8008864:	6863      	ldr	r3, [r4, #4]
 8008866:	bf08      	it	eq
 8008868:	f8c8 1000 	streq.w	r1, [r8]
 800886c:	5162      	str	r2, [r4, r5]
 800886e:	604b      	str	r3, [r1, #4]
 8008870:	4630      	mov	r0, r6
 8008872:	f000 f82f 	bl	80088d4 <__malloc_unlock>
 8008876:	f104 000b 	add.w	r0, r4, #11
 800887a:	1d23      	adds	r3, r4, #4
 800887c:	f020 0007 	bic.w	r0, r0, #7
 8008880:	1ac2      	subs	r2, r0, r3
 8008882:	bf1c      	itt	ne
 8008884:	1a1b      	subne	r3, r3, r0
 8008886:	50a3      	strne	r3, [r4, r2]
 8008888:	e7af      	b.n	80087ea <_malloc_r+0x22>
 800888a:	6862      	ldr	r2, [r4, #4]
 800888c:	42a3      	cmp	r3, r4
 800888e:	bf0c      	ite	eq
 8008890:	f8c8 2000 	streq.w	r2, [r8]
 8008894:	605a      	strne	r2, [r3, #4]
 8008896:	e7eb      	b.n	8008870 <_malloc_r+0xa8>
 8008898:	4623      	mov	r3, r4
 800889a:	6864      	ldr	r4, [r4, #4]
 800889c:	e7ae      	b.n	80087fc <_malloc_r+0x34>
 800889e:	463c      	mov	r4, r7
 80088a0:	687f      	ldr	r7, [r7, #4]
 80088a2:	e7b6      	b.n	8008812 <_malloc_r+0x4a>
 80088a4:	461a      	mov	r2, r3
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	42a3      	cmp	r3, r4
 80088aa:	d1fb      	bne.n	80088a4 <_malloc_r+0xdc>
 80088ac:	2300      	movs	r3, #0
 80088ae:	6053      	str	r3, [r2, #4]
 80088b0:	e7de      	b.n	8008870 <_malloc_r+0xa8>
 80088b2:	230c      	movs	r3, #12
 80088b4:	6033      	str	r3, [r6, #0]
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 f80c 	bl	80088d4 <__malloc_unlock>
 80088bc:	e794      	b.n	80087e8 <_malloc_r+0x20>
 80088be:	6005      	str	r5, [r0, #0]
 80088c0:	e7d6      	b.n	8008870 <_malloc_r+0xa8>
 80088c2:	bf00      	nop
 80088c4:	20001c10 	.word	0x20001c10

080088c8 <__malloc_lock>:
 80088c8:	4801      	ldr	r0, [pc, #4]	@ (80088d0 <__malloc_lock+0x8>)
 80088ca:	f000 b84b 	b.w	8008964 <__retarget_lock_acquire_recursive>
 80088ce:	bf00      	nop
 80088d0:	20001d50 	.word	0x20001d50

080088d4 <__malloc_unlock>:
 80088d4:	4801      	ldr	r0, [pc, #4]	@ (80088dc <__malloc_unlock+0x8>)
 80088d6:	f000 b846 	b.w	8008966 <__retarget_lock_release_recursive>
 80088da:	bf00      	nop
 80088dc:	20001d50 	.word	0x20001d50

080088e0 <memset>:
 80088e0:	4402      	add	r2, r0
 80088e2:	4603      	mov	r3, r0
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d100      	bne.n	80088ea <memset+0xa>
 80088e8:	4770      	bx	lr
 80088ea:	f803 1b01 	strb.w	r1, [r3], #1
 80088ee:	e7f9      	b.n	80088e4 <memset+0x4>

080088f0 <_sbrk_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d06      	ldr	r5, [pc, #24]	@ (800890c <_sbrk_r+0x1c>)
 80088f4:	2300      	movs	r3, #0
 80088f6:	4604      	mov	r4, r0
 80088f8:	4608      	mov	r0, r1
 80088fa:	602b      	str	r3, [r5, #0]
 80088fc:	f7f8 fa20 	bl	8000d40 <_sbrk>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_sbrk_r+0x1a>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_sbrk_r+0x1a>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	20001d4c 	.word	0x20001d4c

08008910 <__errno>:
 8008910:	4b01      	ldr	r3, [pc, #4]	@ (8008918 <__errno+0x8>)
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	2000010c 	.word	0x2000010c

0800891c <__libc_init_array>:
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	4d0d      	ldr	r5, [pc, #52]	@ (8008954 <__libc_init_array+0x38>)
 8008920:	4c0d      	ldr	r4, [pc, #52]	@ (8008958 <__libc_init_array+0x3c>)
 8008922:	1b64      	subs	r4, r4, r5
 8008924:	10a4      	asrs	r4, r4, #2
 8008926:	2600      	movs	r6, #0
 8008928:	42a6      	cmp	r6, r4
 800892a:	d109      	bne.n	8008940 <__libc_init_array+0x24>
 800892c:	4d0b      	ldr	r5, [pc, #44]	@ (800895c <__libc_init_array+0x40>)
 800892e:	4c0c      	ldr	r4, [pc, #48]	@ (8008960 <__libc_init_array+0x44>)
 8008930:	f000 f872 	bl	8008a18 <_init>
 8008934:	1b64      	subs	r4, r4, r5
 8008936:	10a4      	asrs	r4, r4, #2
 8008938:	2600      	movs	r6, #0
 800893a:	42a6      	cmp	r6, r4
 800893c:	d105      	bne.n	800894a <__libc_init_array+0x2e>
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	f855 3b04 	ldr.w	r3, [r5], #4
 8008944:	4798      	blx	r3
 8008946:	3601      	adds	r6, #1
 8008948:	e7ee      	b.n	8008928 <__libc_init_array+0xc>
 800894a:	f855 3b04 	ldr.w	r3, [r5], #4
 800894e:	4798      	blx	r3
 8008950:	3601      	adds	r6, #1
 8008952:	e7f2      	b.n	800893a <__libc_init_array+0x1e>
 8008954:	08008a90 	.word	0x08008a90
 8008958:	08008a90 	.word	0x08008a90
 800895c:	08008a90 	.word	0x08008a90
 8008960:	08008a94 	.word	0x08008a94

08008964 <__retarget_lock_acquire_recursive>:
 8008964:	4770      	bx	lr

08008966 <__retarget_lock_release_recursive>:
 8008966:	4770      	bx	lr

08008968 <memcpy>:
 8008968:	440a      	add	r2, r1
 800896a:	4291      	cmp	r1, r2
 800896c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008970:	d100      	bne.n	8008974 <memcpy+0xc>
 8008972:	4770      	bx	lr
 8008974:	b510      	push	{r4, lr}
 8008976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897e:	4291      	cmp	r1, r2
 8008980:	d1f9      	bne.n	8008976 <memcpy+0xe>
 8008982:	bd10      	pop	{r4, pc}

08008984 <_free_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4605      	mov	r5, r0
 8008988:	2900      	cmp	r1, #0
 800898a:	d041      	beq.n	8008a10 <_free_r+0x8c>
 800898c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008990:	1f0c      	subs	r4, r1, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfb8      	it	lt
 8008996:	18e4      	addlt	r4, r4, r3
 8008998:	f7ff ff96 	bl	80088c8 <__malloc_lock>
 800899c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a14 <_free_r+0x90>)
 800899e:	6813      	ldr	r3, [r2, #0]
 80089a0:	b933      	cbnz	r3, 80089b0 <_free_r+0x2c>
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	6014      	str	r4, [r2, #0]
 80089a6:	4628      	mov	r0, r5
 80089a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ac:	f7ff bf92 	b.w	80088d4 <__malloc_unlock>
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d908      	bls.n	80089c6 <_free_r+0x42>
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	1821      	adds	r1, r4, r0
 80089b8:	428b      	cmp	r3, r1
 80089ba:	bf01      	itttt	eq
 80089bc:	6819      	ldreq	r1, [r3, #0]
 80089be:	685b      	ldreq	r3, [r3, #4]
 80089c0:	1809      	addeq	r1, r1, r0
 80089c2:	6021      	streq	r1, [r4, #0]
 80089c4:	e7ed      	b.n	80089a2 <_free_r+0x1e>
 80089c6:	461a      	mov	r2, r3
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	b10b      	cbz	r3, 80089d0 <_free_r+0x4c>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d9fa      	bls.n	80089c6 <_free_r+0x42>
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	1850      	adds	r0, r2, r1
 80089d4:	42a0      	cmp	r0, r4
 80089d6:	d10b      	bne.n	80089f0 <_free_r+0x6c>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	4401      	add	r1, r0
 80089dc:	1850      	adds	r0, r2, r1
 80089de:	4283      	cmp	r3, r0
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	d1e0      	bne.n	80089a6 <_free_r+0x22>
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	6053      	str	r3, [r2, #4]
 80089ea:	4408      	add	r0, r1
 80089ec:	6010      	str	r0, [r2, #0]
 80089ee:	e7da      	b.n	80089a6 <_free_r+0x22>
 80089f0:	d902      	bls.n	80089f8 <_free_r+0x74>
 80089f2:	230c      	movs	r3, #12
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	e7d6      	b.n	80089a6 <_free_r+0x22>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	1821      	adds	r1, r4, r0
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf04      	itt	eq
 8008a00:	6819      	ldreq	r1, [r3, #0]
 8008a02:	685b      	ldreq	r3, [r3, #4]
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	bf04      	itt	eq
 8008a08:	1809      	addeq	r1, r1, r0
 8008a0a:	6021      	streq	r1, [r4, #0]
 8008a0c:	6054      	str	r4, [r2, #4]
 8008a0e:	e7ca      	b.n	80089a6 <_free_r+0x22>
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
 8008a12:	bf00      	nop
 8008a14:	20001c10 	.word	0x20001c10

08008a18 <_init>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	bf00      	nop
 8008a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1e:	bc08      	pop	{r3}
 8008a20:	469e      	mov	lr, r3
 8008a22:	4770      	bx	lr

08008a24 <_fini>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	bf00      	nop
 8008a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	469e      	mov	lr, r3
 8008a2e:	4770      	bx	lr
